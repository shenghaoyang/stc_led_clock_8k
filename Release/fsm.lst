                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.9 #9959 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module fsm
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _fsm_transition_table_s
                                     12 	.globl _fsm_transition_table_fp
                                     13 	.globl _centiseconds
                                     14 	.globl _adc_calibrate_LDR
                                     15 	.globl _button_read_and_clear_select
                                     16 	.globl _button_read_and_clear_menu
                                     17 	.globl _display_puttemp
                                     18 	.globl _display_putbool
                                     19 	.globl _display_putdate
                                     20 	.globl _display_puttime
                                     21 	.globl _display_putbcd
                                     22 	.globl _display_puts
                                     23 	.globl _ds1302_calculate_CRC
                                     24 	.globl _bcd_add_16
                                     25 	.globl _bcd_add
                                     26 	.globl _ds1302_write_SRAM
                                     27 	.globl _ds1302_set_time
                                     28 	.globl _ds1302_start
                                     29 	.globl _UART_SM0
                                     30 	.globl _UART_SM1
                                     31 	.globl _UART_SM2
                                     32 	.globl _UART_REN
                                     33 	.globl _UART_TB8
                                     34 	.globl _UART_RB8
                                     35 	.globl _UART_TI
                                     36 	.globl _UART_RI
                                     37 	.globl _PCA_CF
                                     38 	.globl _PCA_CR
                                     39 	.globl _PCA_CCF2
                                     40 	.globl _PCA_CCF1
                                     41 	.globl _PCA_CCF0
                                     42 	.globl _TMR_TCON_TF1
                                     43 	.globl _TMR_TCON_TR1
                                     44 	.globl _TMR_TCON_TF0
                                     45 	.globl _TMR_TCON_TR0
                                     46 	.globl _TMR_TCON_IE1
                                     47 	.globl _TMR_TCON_IT1
                                     48 	.globl _TMR_TCON_IE0
                                     49 	.globl _TMR_TCON_IT0
                                     50 	.globl _INT_IP_PPCA
                                     51 	.globl _INT_IP_PLVD
                                     52 	.globl _INT_IP_PADC
                                     53 	.globl _INT_IP_PS
                                     54 	.globl _INT_IP_PT1
                                     55 	.globl _INT_IP_PX1
                                     56 	.globl _INT_IP_PT0
                                     57 	.globl _INT_IP_PX0
                                     58 	.globl _INT_IE_EA
                                     59 	.globl _INT_IE_ELVD
                                     60 	.globl _INT_IE_EADC
                                     61 	.globl _INT_IE_ES
                                     62 	.globl _INT_IE_ET1
                                     63 	.globl _INT_IE_EX1
                                     64 	.globl _INT_IE_ET0
                                     65 	.globl _INT_IE_EX0
                                     66 	.globl _PORT_P5_7
                                     67 	.globl _PORT_P5_6
                                     68 	.globl _PORT_P5_5
                                     69 	.globl _PORT_P5_4
                                     70 	.globl _PORT_P5_3
                                     71 	.globl _PORT_P5_2
                                     72 	.globl _PORT_P5_1
                                     73 	.globl _PORT_P5_0
                                     74 	.globl _PORT_P4_7
                                     75 	.globl _PORT_P4_6
                                     76 	.globl _PORT_P4_5
                                     77 	.globl _PORT_P4_4
                                     78 	.globl _PORT_P4_3
                                     79 	.globl _PORT_P4_2
                                     80 	.globl _PORT_P4_1
                                     81 	.globl _PORT_P4_0
                                     82 	.globl _PORT_P3_7
                                     83 	.globl _PORT_P3_6
                                     84 	.globl _PORT_P3_5
                                     85 	.globl _PORT_P3_4
                                     86 	.globl _PORT_P3_3
                                     87 	.globl _PORT_P3_2
                                     88 	.globl _PORT_P3_1
                                     89 	.globl _PORT_P3_0
                                     90 	.globl _PORT_P2_7
                                     91 	.globl _PORT_P2_6
                                     92 	.globl _PORT_P2_5
                                     93 	.globl _PORT_P2_4
                                     94 	.globl _PORT_P2_3
                                     95 	.globl _PORT_P2_2
                                     96 	.globl _PORT_P2_1
                                     97 	.globl _PORT_P2_0
                                     98 	.globl _PORT_P1_7
                                     99 	.globl _PORT_P1_6
                                    100 	.globl _PORT_P1_5
                                    101 	.globl _PORT_P1_4
                                    102 	.globl _PORT_P1_3
                                    103 	.globl _PORT_P1_2
                                    104 	.globl _PORT_P1_1
                                    105 	.globl _PORT_P1_0
                                    106 	.globl _CY
                                    107 	.globl _AC
                                    108 	.globl _F0
                                    109 	.globl _RS1
                                    110 	.globl _RS0
                                    111 	.globl _OV
                                    112 	.globl _F1
                                    113 	.globl _P
                                    114 	.globl _IAP_CONTR
                                    115 	.globl _IAP_TRIG
                                    116 	.globl _IAP_CMD
                                    117 	.globl _IAP_ADDR
                                    118 	.globl _IAP_ADDRL
                                    119 	.globl _IAP_ADDRH
                                    120 	.globl _IAP_DATA
                                    121 	.globl _UART_SADEN
                                    122 	.globl _UART_SADDR
                                    123 	.globl _UART_SBUF
                                    124 	.globl _UART_SCON
                                    125 	.globl _PCA_CMOD
                                    126 	.globl _PCA_CCON
                                    127 	.globl _PCA_PWM2
                                    128 	.globl _PCA_PWM1
                                    129 	.globl _PCA_PWM0
                                    130 	.globl _PCA_C
                                    131 	.globl _PCA_CCAP2_L
                                    132 	.globl _PCA_CCAP2_H
                                    133 	.globl _PCA_CCAP1_L
                                    134 	.globl _PCA_CCAP1_H
                                    135 	.globl _PCA_CCAP0_L
                                    136 	.globl _PCA_CCAP0_H
                                    137 	.globl _PCA_CCAP2
                                    138 	.globl _PCA_CCAP1
                                    139 	.globl _PCA_CCAP0
                                    140 	.globl _PCA_CCAPM2
                                    141 	.globl _PCA_CCAPM1
                                    142 	.globl _PCA_CCAPM0
                                    143 	.globl _CMP_CR2
                                    144 	.globl _CMP_CR1
                                    145 	.globl _ADC_RESL
                                    146 	.globl _ADC_RESH
                                    147 	.globl _ADC_RES
                                    148 	.globl _ADC_CONTR
                                    149 	.globl _ADC_P1ASF
                                    150 	.globl _EEPROM_CONTR
                                    151 	.globl _EEPROM_TRIG
                                    152 	.globl _EEPROM_CMD
                                    153 	.globl _EEPROM_ADDR
                                    154 	.globl _EEPROM_DATA
                                    155 	.globl _TMR_T2
                                    156 	.globl _TMR_T0
                                    157 	.globl _TMR_TMOD
                                    158 	.globl _TMR_TCON
                                    159 	.globl _INT_IP2
                                    160 	.globl _INT_IP
                                    161 	.globl _INT_IE2
                                    162 	.globl _INT_IE
                                    163 	.globl _PORT_P5M0
                                    164 	.globl _PORT_P5M1
                                    165 	.globl _PORT_P4M0
                                    166 	.globl _PORT_P4M1
                                    167 	.globl _PORT_P3M0
                                    168 	.globl _PORT_P3M1
                                    169 	.globl _PORT_P2M0
                                    170 	.globl _PORT_P2M1
                                    171 	.globl _PORT_P1M0
                                    172 	.globl _PORT_P1M1
                                    173 	.globl _PORT_P5
                                    174 	.globl _PORT_P4
                                    175 	.globl _PORT_P3
                                    176 	.globl _PORT_P2
                                    177 	.globl _PORT_P1
                                    178 	.globl _PSW
                                    179 	.globl _PCON2
                                    180 	.globl _AUXR2
                                    181 	.globl _AUXR1
                                    182 	.globl _AUXR
                                    183 	.globl _PCON
                                    184 	.globl _DPTR
                                    185 	.globl _SP
                                    186 	.globl _alarms
                                    187 	.globl _fsm_home_auto
                                    188 	.globl _BUTTON_DATA_SELECT_HELD_DOWN
                                    189 	.globl _BUTTON_DATA_SELECT_RELEASED_LONGP
                                    190 	.globl _BUTTON_DATA_SELECT_RELEASED_NORMAL
                                    191 	.globl _BUTTON_DATA_SELECT_PRESSED
                                    192 	.globl _BUTTON_DATA_MENU_HELD_DOWN
                                    193 	.globl _BUTTON_DATA_MENU_RELEASED_LONGP
                                    194 	.globl _BUTTON_DATA_MENU_RELEASED_NORMAL
                                    195 	.globl _BUTTON_DATA_MENU_PRESSED
                                    196 	.globl _display_autobrightness
                                    197 	.globl _DS1302_DATA_7
                                    198 	.globl _DS1302_DATA_6
                                    199 	.globl _DS1302_DATA_5
                                    200 	.globl _DS1302_DATA_4
                                    201 	.globl _DS1302_DATA_3
                                    202 	.globl _DS1302_DATA_2
                                    203 	.globl _DS1302_DATA_1
                                    204 	.globl _DS1302_DATA_0
                                    205 	.globl _transition_ticks
                                    206 	.globl _alarm_lastpoll
                                    207 	.globl _BUTTON_DATA
                                    208 	.globl _DS1302_DATA
                                    209 	.globl _fsm_home_fn
                                    210 	.globl _fsm_set_fn
                                    211 	.globl _fsm_alarm_fn
                                    212 	.globl _fsm_config_fn
                                    213 ;--------------------------------------------------------
                                    214 ; special function registers
                                    215 ;--------------------------------------------------------
                                    216 	.area RSEG    (ABS,DATA)
      000000                        217 	.org 0x0000
                           000081   218 _SP	=	0x0081
                           008382   219 _DPTR	=	0x8382
                           000087   220 _PCON	=	0x0087
                           00008E   221 _AUXR	=	0x008e
                           0000A2   222 _AUXR1	=	0x00a2
                           00008F   223 _AUXR2	=	0x008f
                           000097   224 _PCON2	=	0x0097
                           0000D0   225 _PSW	=	0x00d0
                           000090   226 _PORT_P1	=	0x0090
                           0000A0   227 _PORT_P2	=	0x00a0
                           0000B0   228 _PORT_P3	=	0x00b0
                           0000C0   229 _PORT_P4	=	0x00c0
                           0000C8   230 _PORT_P5	=	0x00c8
                           000091   231 _PORT_P1M1	=	0x0091
                           000092   232 _PORT_P1M0	=	0x0092
                           000095   233 _PORT_P2M1	=	0x0095
                           000096   234 _PORT_P2M0	=	0x0096
                           0000B1   235 _PORT_P3M1	=	0x00b1
                           0000B2   236 _PORT_P3M0	=	0x00b2
                           0000B3   237 _PORT_P4M1	=	0x00b3
                           0000B4   238 _PORT_P4M0	=	0x00b4
                           0000C9   239 _PORT_P5M1	=	0x00c9
                           0000CA   240 _PORT_P5M0	=	0x00ca
                           0000A8   241 _INT_IE	=	0x00a8
                           0000AF   242 _INT_IE2	=	0x00af
                           0000B8   243 _INT_IP	=	0x00b8
                           0000B5   244 _INT_IP2	=	0x00b5
                           000088   245 _TMR_TCON	=	0x0088
                           000089   246 _TMR_TMOD	=	0x0089
                           008C8A   247 _TMR_T0	=	0x8c8a
                           00D6D7   248 _TMR_T2	=	0xd6d7
                           0000C2   249 _EEPROM_DATA	=	0x00c2
                           00C3C4   250 _EEPROM_ADDR	=	0xc3c4
                           0000C5   251 _EEPROM_CMD	=	0x00c5
                           0000C6   252 _EEPROM_TRIG	=	0x00c6
                           0000C7   253 _EEPROM_CONTR	=	0x00c7
                           00009D   254 _ADC_P1ASF	=	0x009d
                           0000BC   255 _ADC_CONTR	=	0x00bc
                           00BDBE   256 _ADC_RES	=	0xbdbe
                           0000BD   257 _ADC_RESH	=	0x00bd
                           0000BE   258 _ADC_RESL	=	0x00be
                           0000E6   259 _CMP_CR1	=	0x00e6
                           0000E7   260 _CMP_CR2	=	0x00e7
                           0000DA   261 _PCA_CCAPM0	=	0x00da
                           0000DB   262 _PCA_CCAPM1	=	0x00db
                           0000DC   263 _PCA_CCAPM2	=	0x00dc
                           00FAEA   264 _PCA_CCAP0	=	0xfaea
                           00FBEB   265 _PCA_CCAP1	=	0xfbeb
                           00FCEC   266 _PCA_CCAP2	=	0xfcec
                           0000FA   267 _PCA_CCAP0_H	=	0x00fa
                           0000EA   268 _PCA_CCAP0_L	=	0x00ea
                           0000FB   269 _PCA_CCAP1_H	=	0x00fb
                           0000EB   270 _PCA_CCAP1_L	=	0x00eb
                           0000FC   271 _PCA_CCAP2_H	=	0x00fc
                           0000EC   272 _PCA_CCAP2_L	=	0x00ec
                           00F9E9   273 _PCA_C	=	0xf9e9
                           0000F2   274 _PCA_PWM0	=	0x00f2
                           0000F3   275 _PCA_PWM1	=	0x00f3
                           0000F4   276 _PCA_PWM2	=	0x00f4
                           0000D8   277 _PCA_CCON	=	0x00d8
                           0000D9   278 _PCA_CMOD	=	0x00d9
                           000098   279 _UART_SCON	=	0x0098
                           000099   280 _UART_SBUF	=	0x0099
                           0000A9   281 _UART_SADDR	=	0x00a9
                           0000B9   282 _UART_SADEN	=	0x00b9
                           0000C2   283 _IAP_DATA	=	0x00c2
                           0000C3   284 _IAP_ADDRH	=	0x00c3
                           0000C4   285 _IAP_ADDRL	=	0x00c4
                           00C3C4   286 _IAP_ADDR	=	0xc3c4
                           0000C5   287 _IAP_CMD	=	0x00c5
                           0000C6   288 _IAP_TRIG	=	0x00c6
                           0000C7   289 _IAP_CONTR	=	0x00c7
                                    290 ;--------------------------------------------------------
                                    291 ; special function bits
                                    292 ;--------------------------------------------------------
                                    293 	.area RSEG    (ABS,DATA)
      000000                        294 	.org 0x0000
                           0000D0   295 _P	=	0x00d0
                           0000D1   296 _F1	=	0x00d1
                           0000D2   297 _OV	=	0x00d2
                           0000D3   298 _RS0	=	0x00d3
                           0000D4   299 _RS1	=	0x00d4
                           0000D5   300 _F0	=	0x00d5
                           0000D6   301 _AC	=	0x00d6
                           0000D7   302 _CY	=	0x00d7
                           000090   303 _PORT_P1_0	=	0x0090
                           000091   304 _PORT_P1_1	=	0x0091
                           000092   305 _PORT_P1_2	=	0x0092
                           000093   306 _PORT_P1_3	=	0x0093
                           000094   307 _PORT_P1_4	=	0x0094
                           000095   308 _PORT_P1_5	=	0x0095
                           000096   309 _PORT_P1_6	=	0x0096
                           000097   310 _PORT_P1_7	=	0x0097
                           0000A0   311 _PORT_P2_0	=	0x00a0
                           0000A1   312 _PORT_P2_1	=	0x00a1
                           0000A2   313 _PORT_P2_2	=	0x00a2
                           0000A3   314 _PORT_P2_3	=	0x00a3
                           0000A4   315 _PORT_P2_4	=	0x00a4
                           0000A5   316 _PORT_P2_5	=	0x00a5
                           0000A6   317 _PORT_P2_6	=	0x00a6
                           0000A7   318 _PORT_P2_7	=	0x00a7
                           0000B0   319 _PORT_P3_0	=	0x00b0
                           0000B1   320 _PORT_P3_1	=	0x00b1
                           0000B2   321 _PORT_P3_2	=	0x00b2
                           0000B3   322 _PORT_P3_3	=	0x00b3
                           0000B4   323 _PORT_P3_4	=	0x00b4
                           0000B5   324 _PORT_P3_5	=	0x00b5
                           0000B6   325 _PORT_P3_6	=	0x00b6
                           0000B7   326 _PORT_P3_7	=	0x00b7
                           0000C0   327 _PORT_P4_0	=	0x00c0
                           0000C1   328 _PORT_P4_1	=	0x00c1
                           0000C2   329 _PORT_P4_2	=	0x00c2
                           0000C3   330 _PORT_P4_3	=	0x00c3
                           0000C4   331 _PORT_P4_4	=	0x00c4
                           0000C5   332 _PORT_P4_5	=	0x00c5
                           0000C6   333 _PORT_P4_6	=	0x00c6
                           0000C7   334 _PORT_P4_7	=	0x00c7
                           0000C8   335 _PORT_P5_0	=	0x00c8
                           0000C9   336 _PORT_P5_1	=	0x00c9
                           0000CA   337 _PORT_P5_2	=	0x00ca
                           0000CB   338 _PORT_P5_3	=	0x00cb
                           0000CC   339 _PORT_P5_4	=	0x00cc
                           0000CD   340 _PORT_P5_5	=	0x00cd
                           0000CE   341 _PORT_P5_6	=	0x00ce
                           0000CD   342 _PORT_P5_7	=	0x00cd
                           0000A8   343 _INT_IE_EX0	=	0x00a8
                           0000A9   344 _INT_IE_ET0	=	0x00a9
                           0000AA   345 _INT_IE_EX1	=	0x00aa
                           0000AB   346 _INT_IE_ET1	=	0x00ab
                           0000AC   347 _INT_IE_ES	=	0x00ac
                           0000AD   348 _INT_IE_EADC	=	0x00ad
                           0000AE   349 _INT_IE_ELVD	=	0x00ae
                           0000AF   350 _INT_IE_EA	=	0x00af
                           0000B8   351 _INT_IP_PX0	=	0x00b8
                           0000B9   352 _INT_IP_PT0	=	0x00b9
                           0000BA   353 _INT_IP_PX1	=	0x00ba
                           0000BB   354 _INT_IP_PT1	=	0x00bb
                           0000BC   355 _INT_IP_PS	=	0x00bc
                           0000BD   356 _INT_IP_PADC	=	0x00bd
                           0000BE   357 _INT_IP_PLVD	=	0x00be
                           0000BF   358 _INT_IP_PPCA	=	0x00bf
                           000088   359 _TMR_TCON_IT0	=	0x0088
                           000089   360 _TMR_TCON_IE0	=	0x0089
                           00008A   361 _TMR_TCON_IT1	=	0x008a
                           00008B   362 _TMR_TCON_IE1	=	0x008b
                           00008C   363 _TMR_TCON_TR0	=	0x008c
                           00008D   364 _TMR_TCON_TF0	=	0x008d
                           00008E   365 _TMR_TCON_TR1	=	0x008e
                           00008F   366 _TMR_TCON_TF1	=	0x008f
                           0000D8   367 _PCA_CCF0	=	0x00d8
                           0000D9   368 _PCA_CCF1	=	0x00d9
                           0000DA   369 _PCA_CCF2	=	0x00da
                           0000DE   370 _PCA_CR	=	0x00de
                           0000DF   371 _PCA_CF	=	0x00df
                           000098   372 _UART_RI	=	0x0098
                           000099   373 _UART_TI	=	0x0099
                           00009A   374 _UART_RB8	=	0x009a
                           00009B   375 _UART_TB8	=	0x009b
                           00009C   376 _UART_REN	=	0x009c
                           00009D   377 _UART_SM2	=	0x009d
                           00009E   378 _UART_SM1	=	0x009e
                           00009E   379 _UART_SM0	=	0x009e
                                    380 ;--------------------------------------------------------
                                    381 ; overlayable register banks
                                    382 ;--------------------------------------------------------
                                    383 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        384 	.ds 8
                                    385 ;--------------------------------------------------------
                                    386 ; internal ram data
                                    387 ;--------------------------------------------------------
                                    388 	.area DSEG    (DATA)
                           000021   389 _DS1302_DATA	=	0x0021
                           000022   390 _BUTTON_DATA	=	0x0022
      000000                        391 _alarm_lastpoll::
      000000                        392 	.ds 1
      000001                        393 _transition_ticks::
      000001                        394 	.ds 2
      000003                        395 _fsm_home_fn_curstate_1_169:
      000003                        396 	.ds 1
      000004                        397 _fsm_set_fn_curstate_1_245:
      000004                        398 	.ds 1
      000005                        399 _fsm_alarm_fn_curstate_1_257:
      000005                        400 	.ds 1
      000006                        401 _fsm_alarm_fn_sub_curstate_1_257:
      000006                        402 	.ds 1
      000007                        403 _fsm_config_fn_curstate_1_303:
      000007                        404 	.ds 1
      000008                        405 _fsm_config_fn_config_tmp_1_303:
      000008                        406 	.ds 2
                                    407 ;--------------------------------------------------------
                                    408 ; overlayable items in internal ram 
                                    409 ;--------------------------------------------------------
                                    410 ;--------------------------------------------------------
                                    411 ; indirectly addressable internal ram data
                                    412 ;--------------------------------------------------------
                                    413 	.area ISEG    (DATA)
                                    414 ;--------------------------------------------------------
                                    415 ; absolute internal ram data
                                    416 ;--------------------------------------------------------
                                    417 	.area IABS    (ABS,DATA)
                                    418 	.area IABS    (ABS,DATA)
                                    419 ;--------------------------------------------------------
                                    420 ; bit data
                                    421 ;--------------------------------------------------------
                                    422 	.area BSEG    (BIT)
                           000008   423 _DS1302_DATA_0	=	0x0008
                           000009   424 _DS1302_DATA_1	=	0x0009
                           00000A   425 _DS1302_DATA_2	=	0x000a
                           00000B   426 _DS1302_DATA_3	=	0x000b
                           00000C   427 _DS1302_DATA_4	=	0x000c
                           00000D   428 _DS1302_DATA_5	=	0x000d
                           00000E   429 _DS1302_DATA_6	=	0x000e
                           00000F   430 _DS1302_DATA_7	=	0x000f
                           00001F   431 _display_autobrightness	=	0x001f
                           000010   432 _BUTTON_DATA_MENU_PRESSED	=	0x0010
                           000011   433 _BUTTON_DATA_MENU_RELEASED_NORMAL	=	0x0011
                           000012   434 _BUTTON_DATA_MENU_RELEASED_LONGP	=	0x0012
                           000013   435 _BUTTON_DATA_MENU_HELD_DOWN	=	0x0013
                           000014   436 _BUTTON_DATA_SELECT_PRESSED	=	0x0014
                           000015   437 _BUTTON_DATA_SELECT_RELEASED_NORMAL	=	0x0015
                           000016   438 _BUTTON_DATA_SELECT_RELEASED_LONGP	=	0x0016
                           000017   439 _BUTTON_DATA_SELECT_HELD_DOWN	=	0x0017
                           00001E   440 _fsm_home_auto	=	0x001e
                                    441 ;--------------------------------------------------------
                                    442 ; paged external ram data
                                    443 ;--------------------------------------------------------
                                    444 	.area PSEG    (PAG,XDATA)
                                    445 ;--------------------------------------------------------
                                    446 ; external ram data
                                    447 ;--------------------------------------------------------
                                    448 	.area XSEG    (XDATA)
                           000004   449 _alarms	=	0x0004
                                    450 ;--------------------------------------------------------
                                    451 ; absolute external ram data
                                    452 ;--------------------------------------------------------
                                    453 	.area XABS    (ABS,XDATA)
                                    454 ;--------------------------------------------------------
                                    455 ; external initialized ram data
                                    456 ;--------------------------------------------------------
                                    457 	.area XISEG   (XDATA)
                                    458 	.area HOME    (CODE)
                                    459 	.area GSINIT0 (CODE)
                                    460 	.area GSINIT1 (CODE)
                                    461 	.area GSINIT2 (CODE)
                                    462 	.area GSINIT3 (CODE)
                                    463 	.area GSINIT4 (CODE)
                                    464 	.area GSINIT5 (CODE)
                                    465 	.area GSINIT  (CODE)
                                    466 	.area GSFINAL (CODE)
                                    467 	.area CSEG    (CODE)
                                    468 ;--------------------------------------------------------
                                    469 ; global & static initialisations
                                    470 ;--------------------------------------------------------
                                    471 	.area HOME    (CODE)
                                    472 	.area GSINIT  (CODE)
                                    473 	.area GSFINAL (CODE)
                                    474 	.area GSINIT  (CODE)
                                    475 ;------------------------------------------------------------
                                    476 ;Allocation info for local variables in function 'fsm_home_fn'
                                    477 ;------------------------------------------------------------
                                    478 ;__00010038                Allocated to registers 
                                    479 ;alarm_index               Allocated to registers r5 
                                    480 ;temp_cache                Allocated to registers r6 r7 
                                    481 ;menu_state                Allocated to registers r7 
                                    482 ;select_state              Allocated to registers r6 
                                    483 ;__00010021                Allocated to registers r4 
                                    484 ;__00010019                Allocated to registers r4 
                                    485 ;__00010017                Allocated to registers r4 
                                    486 ;__00010015                Allocated to registers r4 
                                    487 ;__00010013                Allocated to registers r4 
                                    488 ;__00010011                Allocated to registers r5 
                                    489 ;__00010009                Allocated to registers r5 
                                    490 ;__00040040                Allocated to registers 
                                    491 ;__00050041                Allocated to registers 
                                    492 ;__00050042                Allocated with name '(_ds1302 + 0x0005)'
                                    493 ;index                     Allocated to registers 
                                    494 ;dow                       Allocated to registers 
                                    495 ;__00020048                Allocated to registers 
                                    496 ;tmp                       Allocated to registers r6 r7 
                                    497 ;curstate                  Allocated with name '_fsm_home_fn_curstate_1_169'
                                    498 ;------------------------------------------------------------
                                    499 ;	../fsm.c:15: static enum fsm_states_home curstate = fsm_home_start;
      000000 75*03 00         [24]  500 	mov	_fsm_home_fn_curstate_1_169,#0x00
                                    501 ;------------------------------------------------------------
                                    502 ;Allocation info for local variables in function 'fsm_set_fn'
                                    503 ;------------------------------------------------------------
                                    504 ;fsm_set_temp              Allocated to registers r5 
                                    505 ;menu_state                Allocated to registers r7 
                                    506 ;select_state              Allocated to registers r6 
                                    507 ;curstate                  Allocated with name '_fsm_set_fn_curstate_1_245'
                                    508 ;------------------------------------------------------------
                                    509 ;	../fsm.c:167: static enum fsm_states_set curstate = fsm_set_label; //Default display hhmm
      000003 75*04 00         [24]  510 	mov	_fsm_set_fn_curstate_1_245,#0x00
                                    511 ;------------------------------------------------------------
                                    512 ;Allocation info for local variables in function 'fsm_alarm_fn'
                                    513 ;------------------------------------------------------------
                                    514 ;alarm_temp                Allocated to registers r5 
                                    515 ;menu_state                Allocated to registers r7 
                                    516 ;select_state              Allocated to registers r6 
                                    517 ;__00020053                Allocated to registers 
                                    518 ;__00030058                Allocated to registers 
                                    519 ;__00040059                Allocated to registers r4 
                                    520 ;__00040060                Allocated to registers r6 
                                    521 ;index                     Allocated to registers 
                                    522 ;dow                       Allocated to registers 
                                    523 ;__00040064                Allocated to registers r5 
                                    524 ;__00040065                Allocated to registers r6 
                                    525 ;index                     Allocated to registers 
                                    526 ;dow                       Allocated to registers 
                                    527 ;curstate                  Allocated with name '_fsm_alarm_fn_curstate_1_257'
                                    528 ;sub_curstate              Allocated with name '_fsm_alarm_fn_sub_curstate_1_257'
                                    529 ;------------------------------------------------------------
                                    530 ;	../fsm.c:263: static enum fsm_states_alarm curstate = fsm_alarm_label;
      000006 75*05 00         [24]  531 	mov	_fsm_alarm_fn_curstate_1_257,#0x00
                                    532 ;	../fsm.c:264: static enum fsm_substates_alarm sub_curstate = fsm_alarm_substate_toggle;
      000009 75*06 00         [24]  533 	mov	_fsm_alarm_fn_sub_curstate_1_257,#0x00
                                    534 ;------------------------------------------------------------
                                    535 ;Allocation info for local variables in function 'fsm_config_fn'
                                    536 ;------------------------------------------------------------
                                    537 ;config_tmp2               Allocated to registers r4 r5 
                                    538 ;menu_state                Allocated to registers r7 
                                    539 ;select_state              Allocated to registers r6 
                                    540 ;__00020071                Allocated to registers 
                                    541 ;__00040067                Allocated to registers 
                                    542 ;tmp                       Allocated to registers r4 r5 
                                    543 ;__00040069                Allocated to registers 
                                    544 ;tmp                       Allocated to registers r4 r5 
                                    545 ;tmp                       Allocated to registers r4 r5 
                                    546 ;curstate                  Allocated with name '_fsm_config_fn_curstate_1_303'
                                    547 ;config_tmp                Allocated with name '_fsm_config_fn_config_tmp_1_303'
                                    548 ;------------------------------------------------------------
                                    549 ;	../fsm.c:397: static enum fsm_states_config curstate = fsm_config_label;
      00000C 75*07 00         [24]  550 	mov	_fsm_config_fn_curstate_1_303,#0x00
                                    551 ;	../fsm.c:11: uint8_t alarm_lastpoll = 0;					  ///< Time alarm was last polled (minutes)
      00000F 75*00 00         [24]  552 	mov	_alarm_lastpoll,#0x00
                                    553 ;	../fsm.c:12: uint16_t transition_ticks = 0;				  ///< 10ms timer ticks at last transition
      000012 E4               [12]  554 	clr	a
      000013 F5*01            [12]  555 	mov	_transition_ticks,a
      000015 F5*02            [12]  556 	mov	(_transition_ticks + 1),a
                                    557 ;--------------------------------------------------------
                                    558 ; Home
                                    559 ;--------------------------------------------------------
                                    560 	.area HOME    (CODE)
                                    561 	.area HOME    (CODE)
                                    562 ;--------------------------------------------------------
                                    563 ; code
                                    564 ;--------------------------------------------------------
                                    565 	.area CSEG    (CODE)
                                    566 ;------------------------------------------------------------
                                    567 ;Allocation info for local variables in function 'fsm_home_fn'
                                    568 ;------------------------------------------------------------
                                    569 ;__00010038                Allocated to registers 
                                    570 ;alarm_index               Allocated to registers r5 
                                    571 ;temp_cache                Allocated to registers r6 r7 
                                    572 ;menu_state                Allocated to registers r7 
                                    573 ;select_state              Allocated to registers r6 
                                    574 ;__00010021                Allocated to registers r4 
                                    575 ;__00010019                Allocated to registers r4 
                                    576 ;__00010017                Allocated to registers r4 
                                    577 ;__00010015                Allocated to registers r4 
                                    578 ;__00010013                Allocated to registers r4 
                                    579 ;__00010011                Allocated to registers r5 
                                    580 ;__00010009                Allocated to registers r5 
                                    581 ;__00040040                Allocated to registers 
                                    582 ;__00050041                Allocated to registers 
                                    583 ;__00050042                Allocated with name '(_ds1302 + 0x0005)'
                                    584 ;index                     Allocated to registers 
                                    585 ;dow                       Allocated to registers 
                                    586 ;__00020048                Allocated to registers 
                                    587 ;tmp                       Allocated to registers r6 r7 
                                    588 ;curstate                  Allocated with name '_fsm_home_fn_curstate_1_169'
                                    589 ;------------------------------------------------------------
                                    590 ;	../fsm.c:14: enum fsm_return fsm_home_fn() __reentrant {
                                    591 ;	-----------------------------------------
                                    592 ;	 function fsm_home_fn
                                    593 ;	-----------------------------------------
      000000                        594 _fsm_home_fn:
                           000007   595 	ar7 = 0x07
                           000006   596 	ar6 = 0x06
                           000005   597 	ar5 = 0x05
                           000004   598 	ar4 = 0x04
                           000003   599 	ar3 = 0x03
                           000002   600 	ar2 = 0x02
                           000001   601 	ar1 = 0x01
                           000000   602 	ar0 = 0x00
                                    603 ;	../fsm.c:21: menu_state = button_read_and_clear_menu();
      000000 12r00r00         [24]  604 	lcall	_button_read_and_clear_menu
      000003 AF 82            [24]  605 	mov	r7,dpl
                                    606 ;	../fsm.c:22: select_state = button_read_and_clear_select();
      000005 C0 07            [24]  607 	push	ar7
      000007 12r00r00         [24]  608 	lcall	_button_read_and_clear_select
      00000A AE 82            [24]  609 	mov	r6,dpl
      00000C D0 07            [24]  610 	pop	ar7
                                    611 ;	../fsm.c:24: if(curstate != fsm_home_alarm){
      00000E 74 07            [12]  612 	mov	a,#0x07
      000010 B5*03 03         [24]  613 	cjne	a,_fsm_home_fn_curstate_1_169,00276$
      000013 02r01r4D         [24]  614 	ljmp	00134$
      000016                        615 00276$:
                                    616 ;	../fsm.c:25: if((menu_state == BUTTON_LONG_PRESSED) && (select_state == BUTTON_LONG_PRESSED)){
      000016 BF 01 03         [24]  617 	cjne	r7,#0x01,00277$
      000019 EF               [12]  618 	mov	a,r7
      00001A 80 01            [24]  619 	sjmp	00278$
      00001C                        620 00277$:
      00001C E4               [12]  621 	clr	a
      00001D                        622 00278$:
      00001D FD               [12]  623 	mov	r5,a
      00001E 60 0A            [24]  624 	jz	00102$
      000020 BE 01 07         [24]  625 	cjne	r6,#0x01,00102$
                                    626 ;	../fsm.c:27: curstate = fsm_home_start; //Reset state back to default
      000023 75*03 00         [24]  627 	mov	_fsm_home_fn_curstate_1_169,#0x00
                                    628 ;	../fsm.c:28: return fsm_ok; //Return OK to transition to configuration mode
      000026 75 82 00         [24]  629 	mov	dpl,#0x00
      000029 22               [24]  630 	ret
      00002A                        631 00102$:
                                    632 ;	../fsm.c:32: if(menu_state == BUTTON_PRESSED){
      00002A EF               [12]  633 	mov	a,r7
      00002B 70 21            [24]  634 	jnz	00107$
                                    635 ;	../fsm.c:34: transition_ticks = centiseconds();
      00002D C0 07            [24]  636 	push	ar7
      00002F C0 06            [24]  637 	push	ar6
      000031 C0 05            [24]  638 	push	ar5
      000033 12r00r00         [24]  639 	lcall	_centiseconds
      000036 85 82*01         [24]  640 	mov	_transition_ticks,dpl
      000039 85 83*02         [24]  641 	mov	(_transition_ticks + 1),dph
      00003C D0 05            [24]  642 	pop	ar5
      00003E D0 06            [24]  643 	pop	ar6
      000040 D0 07            [24]  644 	pop	ar7
                                    645 ;	../fsm.c:35: fsm_home_auto = 0;
                                    646 ;	assignBit
      000042 C2 1E            [12]  647 	clr	_fsm_home_auto
                                    648 ;	../fsm.c:36: if(++curstate == fsm_home_end)
      000044 05*03            [12]  649 	inc	_fsm_home_fn_curstate_1_169
      000046 74 06            [12]  650 	mov	a,#0x06
      000048 B5*03 03         [24]  651 	cjne	a,_fsm_home_fn_curstate_1_169,00107$
                                    652 ;	../fsm.c:37: curstate = fsm_home_start;
      00004B 75*03 00         [24]  653 	mov	_fsm_home_fn_curstate_1_169,#0x00
      00004E                        654 00107$:
                                    655 ;	../fsm.c:40: if(menu_state == BUTTON_LONG_PRESSED){
      00004E ED               [12]  656 	mov	a,r5
      00004F 60 16            [24]  657 	jz	00109$
                                    658 ;	../fsm.c:42: transition_ticks = centiseconds();
      000051 C0 07            [24]  659 	push	ar7
      000053 C0 06            [24]  660 	push	ar6
      000055 12r00r00         [24]  661 	lcall	_centiseconds
      000058 85 82*01         [24]  662 	mov	_transition_ticks,dpl
      00005B 85 83*02         [24]  663 	mov	(_transition_ticks + 1),dph
      00005E D0 06            [24]  664 	pop	ar6
      000060 D0 07            [24]  665 	pop	ar7
                                    666 ;	../fsm.c:43: fsm_home_auto = 0;
                                    667 ;	assignBit
      000062 C2 1E            [12]  668 	clr	_fsm_home_auto
                                    669 ;	../fsm.c:44: curstate = fsm_home_start;
      000064 75*03 00         [24]  670 	mov	_fsm_home_fn_curstate_1_169,#0x00
      000067                        671 00109$:
                                    672 ;	../fsm.c:47: if(select_state == BUTTON_PRESSED){
      000067 EE               [12]  673 	mov	a,r6
      000068 70 13            [24]  674 	jnz	00114$
                                    675 ;	../fsm.c:48: if(display_autobrightness){
                                    676 ;	../fsm.c:49: display_autobrightness = 0;
                                    677 ;	assignBit
      00006A 10 1F 02         [24]  678 	jbc	_display_autobrightness,00287$
      00006D 80 0C            [24]  679 	sjmp	00111$
      00006F                        680 00287$:
                                    681 ;	../fsm.c:50: INT_IE_EA = 0;
                                    682 ;	assignBit
      00006F C2 AF            [12]  683 	clr	_INT_IE_EA
                                    684 ;	../fsm.c:51: display_counts = DISPLAY_COUNTS_MAX;
      000071 75*00 00         [24]  685 	mov	_display_counts,#0x00
      000074 75*01 EA         [24]  686 	mov	(_display_counts + 1),#0xea
                                    687 ;	../fsm.c:52: INT_IE_EA = 1;
                                    688 ;	assignBit
      000077 D2 AF            [12]  689 	setb	_INT_IE_EA
      000079 80 02            [24]  690 	sjmp	00114$
      00007B                        691 00111$:
                                    692 ;	../fsm.c:54: display_autobrightness = 1;
                                    693 ;	assignBit
      00007B D2 1F            [12]  694 	setb	_display_autobrightness
      00007D                        695 00114$:
                                    696 ;	../fsm.c:58: if(curstate != fsm_home_start) {
      00007D E5*03            [12]  697 	mov	a,_fsm_home_fn_curstate_1_169
      00007F 70 03            [24]  698 	jnz	00288$
      000081 02r01r26         [24]  699 	ljmp	00131$
      000084                        700 00288$:
                                    701 ;	../fsm.c:59: if(fsm_home_auto){
      000084 30 1E 67         [24]  702 	jnb	_fsm_home_auto,00126$
                                    703 ;	../fsm.c:61: if((centiseconds() - transition_ticks) > FSM_HOME_AUTO_SCROLL_TICKS){
      000087 C0 07            [24]  704 	push	ar7
      000089 C0 06            [24]  705 	push	ar6
      00008B 12r00r00         [24]  706 	lcall	_centiseconds
      00008E E5 82            [12]  707 	mov	a,dpl
      000090 85 83 F0         [24]  708 	mov	b,dph
      000093 D0 06            [24]  709 	pop	ar6
      000095 D0 07            [24]  710 	pop	ar7
      000097 C3               [12]  711 	clr	c
      000098 95*01            [12]  712 	subb	a,_transition_ticks
      00009A FC               [12]  713 	mov	r4,a
      00009B E5 F0            [12]  714 	mov	a,b
      00009D 95*02            [12]  715 	subb	a,(_transition_ticks + 1)
      00009F FD               [12]  716 	mov	r5,a
      0000A0 C3               [12]  717 	clr	c
      0000A1 74 C8            [12]  718 	mov	a,#0xc8
      0000A3 9C               [12]  719 	subb	a,r4
      0000A4 E4               [12]  720 	clr	a
      0000A5 9D               [12]  721 	subb	a,r5
      0000A6 40 03            [24]  722 	jc	00290$
      0000A8 02r01r4D         [24]  723 	ljmp	00134$
      0000AB                        724 00290$:
                                    725 ;	../fsm.c:64: while(++curstate != fsm_home_end){
      0000AB                        726 00118$:
      0000AB 05*03            [12]  727 	inc	_fsm_home_fn_curstate_1_169
      0000AD 74 06            [12]  728 	mov	a,#0x06
      0000AF B5*03 02         [24]  729 	cjne	a,_fsm_home_fn_curstate_1_169,00291$
      0000B2 80 22            [24]  730 	sjmp	00120$
      0000B4                        731 00291$:
                                    732 ;	../fsm.c:65: if((ds1302_sram_data[0x03] >> curstate) & 0x01){
      0000B4 90r00r03         [24]  733 	mov	dptr,#(_ds1302_sram_data + 0x0003)
      0000B7 E0               [24]  734 	movx	a,@dptr
      0000B8 FD               [12]  735 	mov	r5,a
      0000B9 85*03 F0         [24]  736 	mov	b,_fsm_home_fn_curstate_1_169
      0000BC 05 F0            [12]  737 	inc	b
      0000BE ED               [12]  738 	mov	a,r5
      0000BF 80 02            [24]  739 	sjmp	00293$
      0000C1                        740 00292$:
      0000C1 C3               [12]  741 	clr	c
      0000C2 13               [12]  742 	rrc	a
      0000C3                        743 00293$:
      0000C3 D5 F0 FB         [24]  744 	djnz	b,00292$
      0000C6 30 E0 E2         [24]  745 	jnb	acc.0,00118$
                                    746 ;	../fsm.c:67: transition_ticks = centiseconds();
      0000C9 12r00r00         [24]  747 	lcall	_centiseconds
      0000CC 85 82*01         [24]  748 	mov	_transition_ticks,dpl
      0000CF 85 83*02         [24]  749 	mov	(_transition_ticks + 1),dph
                                    750 ;	../fsm.c:68: return fsm_repeat;
      0000D2 75 82 01         [24]  751 	mov	dpl,#0x01
      0000D5 22               [24]  752 	ret
      0000D6                        753 00120$:
                                    754 ;	../fsm.c:72: transition_ticks = centiseconds();
      0000D6 C0 07            [24]  755 	push	ar7
      0000D8 C0 06            [24]  756 	push	ar6
      0000DA 12r00r00         [24]  757 	lcall	_centiseconds
      0000DD 85 82*01         [24]  758 	mov	_transition_ticks,dpl
      0000E0 85 83*02         [24]  759 	mov	(_transition_ticks + 1),dph
      0000E3 D0 06            [24]  760 	pop	ar6
      0000E5 D0 07            [24]  761 	pop	ar7
                                    762 ;	../fsm.c:73: fsm_home_auto = 0;
                                    763 ;	assignBit
      0000E7 C2 1E            [12]  764 	clr	_fsm_home_auto
                                    765 ;	../fsm.c:74: curstate = fsm_home_start;
      0000E9 75*03 00         [24]  766 	mov	_fsm_home_fn_curstate_1_169,#0x00
      0000EC 80 5F            [24]  767 	sjmp	00134$
      0000EE                        768 00126$:
                                    769 ;	../fsm.c:78: if(((centiseconds() - transition_ticks) > FSM_HOME_RESET_TICKS)) {
      0000EE C0 07            [24]  770 	push	ar7
      0000F0 C0 06            [24]  771 	push	ar6
      0000F2 12r00r00         [24]  772 	lcall	_centiseconds
      0000F5 E5 82            [12]  773 	mov	a,dpl
      0000F7 85 83 F0         [24]  774 	mov	b,dph
      0000FA D0 06            [24]  775 	pop	ar6
      0000FC D0 07            [24]  776 	pop	ar7
      0000FE C3               [12]  777 	clr	c
      0000FF 95*01            [12]  778 	subb	a,_transition_ticks
      000101 FC               [12]  779 	mov	r4,a
      000102 E5 F0            [12]  780 	mov	a,b
      000104 95*02            [12]  781 	subb	a,(_transition_ticks + 1)
      000106 FD               [12]  782 	mov	r5,a
      000107 C3               [12]  783 	clr	c
      000108 74 E8            [12]  784 	mov	a,#0xe8
      00010A 9C               [12]  785 	subb	a,r4
      00010B 74 03            [12]  786 	mov	a,#0x03
      00010D 9D               [12]  787 	subb	a,r5
      00010E 50 3D            [24]  788 	jnc	00134$
                                    789 ;	../fsm.c:80: transition_ticks = centiseconds();
      000110 C0 07            [24]  790 	push	ar7
      000112 C0 06            [24]  791 	push	ar6
      000114 12r00r00         [24]  792 	lcall	_centiseconds
      000117 85 82*01         [24]  793 	mov	_transition_ticks,dpl
      00011A 85 83*02         [24]  794 	mov	(_transition_ticks + 1),dph
      00011D D0 06            [24]  795 	pop	ar6
      00011F D0 07            [24]  796 	pop	ar7
                                    797 ;	../fsm.c:81: curstate = fsm_home_start;
      000121 75*03 00         [24]  798 	mov	_fsm_home_fn_curstate_1_169,#0x00
      000124 80 27            [24]  799 	sjmp	00134$
      000126                        800 00131$:
                                    801 ;	../fsm.c:88: if((centiseconds() - transition_ticks) > FSM_HOME_AUTO_ENABLE_TICKS) {
      000126 C0 07            [24]  802 	push	ar7
      000128 C0 06            [24]  803 	push	ar6
      00012A 12r00r00         [24]  804 	lcall	_centiseconds
      00012D E5 82            [12]  805 	mov	a,dpl
      00012F 85 83 F0         [24]  806 	mov	b,dph
      000132 D0 06            [24]  807 	pop	ar6
      000134 D0 07            [24]  808 	pop	ar7
      000136 C3               [12]  809 	clr	c
      000137 95*01            [12]  810 	subb	a,_transition_ticks
      000139 FC               [12]  811 	mov	r4,a
      00013A E5 F0            [12]  812 	mov	a,b
      00013C 95*02            [12]  813 	subb	a,(_transition_ticks + 1)
      00013E FD               [12]  814 	mov	r5,a
      00013F C3               [12]  815 	clr	c
      000140 74 E8            [12]  816 	mov	a,#0xe8
      000142 9C               [12]  817 	subb	a,r4
      000143 74 03            [12]  818 	mov	a,#0x03
      000145 9D               [12]  819 	subb	a,r5
      000146 50 05            [24]  820 	jnc	00134$
                                    821 ;	../fsm.c:90: fsm_home_auto = 1;
                                    822 ;	assignBit
      000148 D2 1E            [12]  823 	setb	_fsm_home_auto
                                    824 ;	../fsm.c:91: goto find_auto_target;
      00014A 02r00rAB         [24]  825 	ljmp	00118$
      00014D                        826 00134$:
                                    827 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:352: ds1302_start(0xbf); //Start clock burst read
      00014D 75 82 BF         [24]  828 	mov	dpl,#0xbf
      000150 C0 07            [24]  829 	push	ar7
      000152 C0 06            [24]  830 	push	ar6
      000154 12r00r00         [24]  831 	lcall	_ds1302_start
      000157 D0 06            [24]  832 	pop	ar6
      000159 D0 07            [24]  833 	pop	ar7
                                    834 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:353: ds1302.seconds = ds1302_read_byte(); //Read in seconds register
                                    835 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:123: DS1302_IO = 1;		//Stop driving I/O line
                                    836 ;	assignBit
      00015B D2 91            [12]  837 	setb	_PORT_P1_1
                                    838 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:130: __endasm;
      00015D 00               [12]  839 	nop
      00015E 00               [12]  840 	nop
      00015F 00               [12]  841 	nop
                                    842 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:131: DS1302_DATA_0 = DS1302_IO;
                                    843 ;	assignBit
      000160 A2 91            [12]  844 	mov	c,_PORT_P1_1
      000162 92 08            [24]  845 	mov	_DS1302_DATA_0,c
                                    846 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:133: DS1302_CLK = 1;
                                    847 ;	assignBit
      000164 D2 92            [12]  848 	setb	_PORT_P1_2
                                    849 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:139: __endasm;
      000166 00               [12]  850 	nop
      000167 00               [12]  851 	nop
      000168 00               [12]  852 	nop
      000169 00               [12]  853 	nop
                                    854 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:140: DS1302_CLK = 0;
                                    855 ;	assignBit
      00016A C2 92            [12]  856 	clr	_PORT_P1_2
                                    857 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:145: __endasm;
      00016C 00               [12]  858 	nop
      00016D 00               [12]  859 	nop
      00016E 00               [12]  860 	nop
                                    861 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:146: DS1302_DATA_1 = DS1302_IO;
                                    862 ;	assignBit
      00016F A2 91            [12]  863 	mov	c,_PORT_P1_1
      000171 92 09            [24]  864 	mov	_DS1302_DATA_1,c
                                    865 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:148: DS1302_CLK = 1;
                                    866 ;	assignBit
      000173 D2 92            [12]  867 	setb	_PORT_P1_2
                                    868 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:154: __endasm;
      000175 00               [12]  869 	nop
      000176 00               [12]  870 	nop
      000177 00               [12]  871 	nop
      000178 00               [12]  872 	nop
                                    873 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:155: DS1302_CLK = 0;
                                    874 ;	assignBit
      000179 C2 92            [12]  875 	clr	_PORT_P1_2
                                    876 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:160: __endasm;
      00017B 00               [12]  877 	nop
      00017C 00               [12]  878 	nop
      00017D 00               [12]  879 	nop
                                    880 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:161: DS1302_DATA_2 = DS1302_IO;
                                    881 ;	assignBit
      00017E A2 91            [12]  882 	mov	c,_PORT_P1_1
      000180 92 0A            [24]  883 	mov	_DS1302_DATA_2,c
                                    884 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:163: DS1302_CLK = 1;
                                    885 ;	assignBit
      000182 D2 92            [12]  886 	setb	_PORT_P1_2
                                    887 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:169: __endasm;
      000184 00               [12]  888 	nop
      000185 00               [12]  889 	nop
      000186 00               [12]  890 	nop
      000187 00               [12]  891 	nop
                                    892 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:170: DS1302_CLK = 0;
                                    893 ;	assignBit
      000188 C2 92            [12]  894 	clr	_PORT_P1_2
                                    895 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:175: __endasm;
      00018A 00               [12]  896 	nop
      00018B 00               [12]  897 	nop
      00018C 00               [12]  898 	nop
                                    899 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:176: DS1302_DATA_3 = DS1302_IO;
                                    900 ;	assignBit
      00018D A2 91            [12]  901 	mov	c,_PORT_P1_1
      00018F 92 0B            [24]  902 	mov	_DS1302_DATA_3,c
                                    903 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:178: DS1302_CLK = 1;
                                    904 ;	assignBit
      000191 D2 92            [12]  905 	setb	_PORT_P1_2
                                    906 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:184: __endasm;
      000193 00               [12]  907 	nop
      000194 00               [12]  908 	nop
      000195 00               [12]  909 	nop
      000196 00               [12]  910 	nop
                                    911 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:185: DS1302_CLK = 0;
                                    912 ;	assignBit
      000197 C2 92            [12]  913 	clr	_PORT_P1_2
                                    914 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:190: __endasm;
      000199 00               [12]  915 	nop
      00019A 00               [12]  916 	nop
      00019B 00               [12]  917 	nop
                                    918 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:191: DS1302_DATA_4 = DS1302_IO;
                                    919 ;	assignBit
      00019C A2 91            [12]  920 	mov	c,_PORT_P1_1
      00019E 92 0C            [24]  921 	mov	_DS1302_DATA_4,c
                                    922 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:193: DS1302_CLK = 1;
                                    923 ;	assignBit
      0001A0 D2 92            [12]  924 	setb	_PORT_P1_2
                                    925 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:199: __endasm;
      0001A2 00               [12]  926 	nop
      0001A3 00               [12]  927 	nop
      0001A4 00               [12]  928 	nop
      0001A5 00               [12]  929 	nop
                                    930 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:200: DS1302_CLK = 0;
                                    931 ;	assignBit
      0001A6 C2 92            [12]  932 	clr	_PORT_P1_2
                                    933 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:205: __endasm;
      0001A8 00               [12]  934 	nop
      0001A9 00               [12]  935 	nop
      0001AA 00               [12]  936 	nop
                                    937 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:206: DS1302_DATA_5 = DS1302_IO;
                                    938 ;	assignBit
      0001AB A2 91            [12]  939 	mov	c,_PORT_P1_1
      0001AD 92 0D            [24]  940 	mov	_DS1302_DATA_5,c
                                    941 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:208: DS1302_CLK = 1;
                                    942 ;	assignBit
      0001AF D2 92            [12]  943 	setb	_PORT_P1_2
                                    944 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:214: __endasm;
      0001B1 00               [12]  945 	nop
      0001B2 00               [12]  946 	nop
      0001B3 00               [12]  947 	nop
      0001B4 00               [12]  948 	nop
                                    949 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:215: DS1302_CLK = 0;
                                    950 ;	assignBit
      0001B5 C2 92            [12]  951 	clr	_PORT_P1_2
                                    952 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:220: __endasm;
      0001B7 00               [12]  953 	nop
      0001B8 00               [12]  954 	nop
      0001B9 00               [12]  955 	nop
                                    956 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:221: DS1302_DATA_6 = DS1302_IO;
                                    957 ;	assignBit
      0001BA A2 91            [12]  958 	mov	c,_PORT_P1_1
      0001BC 92 0E            [24]  959 	mov	_DS1302_DATA_6,c
                                    960 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:223: DS1302_CLK = 1;
                                    961 ;	assignBit
      0001BE D2 92            [12]  962 	setb	_PORT_P1_2
                                    963 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:229: __endasm;
      0001C0 00               [12]  964 	nop
      0001C1 00               [12]  965 	nop
      0001C2 00               [12]  966 	nop
      0001C3 00               [12]  967 	nop
                                    968 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:230: DS1302_CLK = 0;
                                    969 ;	assignBit
      0001C4 C2 92            [12]  970 	clr	_PORT_P1_2
                                    971 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:235: __endasm;
      0001C6 00               [12]  972 	nop
      0001C7 00               [12]  973 	nop
      0001C8 00               [12]  974 	nop
                                    975 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:236: DS1302_DATA_7 = DS1302_IO;
                                    976 ;	assignBit
      0001C9 A2 91            [12]  977 	mov	c,_PORT_P1_1
      0001CB 92 0F            [24]  978 	mov	_DS1302_DATA_7,c
                                    979 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:237: DS1302_CLK = 1;
                                    980 ;	assignBit
      0001CD D2 92            [12]  981 	setb	_PORT_P1_2
                                    982 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:243: __endasm;
      0001CF 00               [12]  983 	nop
      0001D0 00               [12]  984 	nop
      0001D1 00               [12]  985 	nop
      0001D2 00               [12]  986 	nop
                                    987 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:244: DS1302_CLK = 0;
                                    988 ;	assignBit
      0001D3 C2 92            [12]  989 	clr	_PORT_P1_2
                                    990 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:246: return DS1302_DATA;
      0001D5 AD 21            [24]  991 	mov	r5,_DS1302_DATA
                                    992 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:353: ds1302.seconds = ds1302_read_byte(); //Read in seconds register
      0001D7 8D*00            [24]  993 	mov	_ds1302,r5
                                    994 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:354: ds1302.minutes = ds1302_read_byte(); //Read in minutes register
                                    995 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:123: DS1302_IO = 1;		//Stop driving I/O line
                                    996 ;	assignBit
      0001D9 D2 91            [12]  997 	setb	_PORT_P1_1
                                    998 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:130: __endasm;
      0001DB 00               [12]  999 	nop
      0001DC 00               [12] 1000 	nop
      0001DD 00               [12] 1001 	nop
                                   1002 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:131: DS1302_DATA_0 = DS1302_IO;
                                   1003 ;	assignBit
      0001DE A2 91            [12] 1004 	mov	c,_PORT_P1_1
      0001E0 92 08            [24] 1005 	mov	_DS1302_DATA_0,c
                                   1006 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:133: DS1302_CLK = 1;
                                   1007 ;	assignBit
      0001E2 D2 92            [12] 1008 	setb	_PORT_P1_2
                                   1009 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:139: __endasm;
      0001E4 00               [12] 1010 	nop
      0001E5 00               [12] 1011 	nop
      0001E6 00               [12] 1012 	nop
      0001E7 00               [12] 1013 	nop
                                   1014 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:140: DS1302_CLK = 0;
                                   1015 ;	assignBit
      0001E8 C2 92            [12] 1016 	clr	_PORT_P1_2
                                   1017 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:145: __endasm;
      0001EA 00               [12] 1018 	nop
      0001EB 00               [12] 1019 	nop
      0001EC 00               [12] 1020 	nop
                                   1021 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:146: DS1302_DATA_1 = DS1302_IO;
                                   1022 ;	assignBit
      0001ED A2 91            [12] 1023 	mov	c,_PORT_P1_1
      0001EF 92 09            [24] 1024 	mov	_DS1302_DATA_1,c
                                   1025 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:148: DS1302_CLK = 1;
                                   1026 ;	assignBit
      0001F1 D2 92            [12] 1027 	setb	_PORT_P1_2
                                   1028 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:154: __endasm;
      0001F3 00               [12] 1029 	nop
      0001F4 00               [12] 1030 	nop
      0001F5 00               [12] 1031 	nop
      0001F6 00               [12] 1032 	nop
                                   1033 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:155: DS1302_CLK = 0;
                                   1034 ;	assignBit
      0001F7 C2 92            [12] 1035 	clr	_PORT_P1_2
                                   1036 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:160: __endasm;
      0001F9 00               [12] 1037 	nop
      0001FA 00               [12] 1038 	nop
      0001FB 00               [12] 1039 	nop
                                   1040 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:161: DS1302_DATA_2 = DS1302_IO;
                                   1041 ;	assignBit
      0001FC A2 91            [12] 1042 	mov	c,_PORT_P1_1
      0001FE 92 0A            [24] 1043 	mov	_DS1302_DATA_2,c
                                   1044 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:163: DS1302_CLK = 1;
                                   1045 ;	assignBit
      000200 D2 92            [12] 1046 	setb	_PORT_P1_2
                                   1047 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:169: __endasm;
      000202 00               [12] 1048 	nop
      000203 00               [12] 1049 	nop
      000204 00               [12] 1050 	nop
      000205 00               [12] 1051 	nop
                                   1052 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:170: DS1302_CLK = 0;
                                   1053 ;	assignBit
      000206 C2 92            [12] 1054 	clr	_PORT_P1_2
                                   1055 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:175: __endasm;
      000208 00               [12] 1056 	nop
      000209 00               [12] 1057 	nop
      00020A 00               [12] 1058 	nop
                                   1059 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:176: DS1302_DATA_3 = DS1302_IO;
                                   1060 ;	assignBit
      00020B A2 91            [12] 1061 	mov	c,_PORT_P1_1
      00020D 92 0B            [24] 1062 	mov	_DS1302_DATA_3,c
                                   1063 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:178: DS1302_CLK = 1;
                                   1064 ;	assignBit
      00020F D2 92            [12] 1065 	setb	_PORT_P1_2
                                   1066 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:184: __endasm;
      000211 00               [12] 1067 	nop
      000212 00               [12] 1068 	nop
      000213 00               [12] 1069 	nop
      000214 00               [12] 1070 	nop
                                   1071 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:185: DS1302_CLK = 0;
                                   1072 ;	assignBit
      000215 C2 92            [12] 1073 	clr	_PORT_P1_2
                                   1074 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:190: __endasm;
      000217 00               [12] 1075 	nop
      000218 00               [12] 1076 	nop
      000219 00               [12] 1077 	nop
                                   1078 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:191: DS1302_DATA_4 = DS1302_IO;
                                   1079 ;	assignBit
      00021A A2 91            [12] 1080 	mov	c,_PORT_P1_1
      00021C 92 0C            [24] 1081 	mov	_DS1302_DATA_4,c
                                   1082 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:193: DS1302_CLK = 1;
                                   1083 ;	assignBit
      00021E D2 92            [12] 1084 	setb	_PORT_P1_2
                                   1085 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:199: __endasm;
      000220 00               [12] 1086 	nop
      000221 00               [12] 1087 	nop
      000222 00               [12] 1088 	nop
      000223 00               [12] 1089 	nop
                                   1090 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:200: DS1302_CLK = 0;
                                   1091 ;	assignBit
      000224 C2 92            [12] 1092 	clr	_PORT_P1_2
                                   1093 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:205: __endasm;
      000226 00               [12] 1094 	nop
      000227 00               [12] 1095 	nop
      000228 00               [12] 1096 	nop
                                   1097 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:206: DS1302_DATA_5 = DS1302_IO;
                                   1098 ;	assignBit
      000229 A2 91            [12] 1099 	mov	c,_PORT_P1_1
      00022B 92 0D            [24] 1100 	mov	_DS1302_DATA_5,c
                                   1101 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:208: DS1302_CLK = 1;
                                   1102 ;	assignBit
      00022D D2 92            [12] 1103 	setb	_PORT_P1_2
                                   1104 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:214: __endasm;
      00022F 00               [12] 1105 	nop
      000230 00               [12] 1106 	nop
      000231 00               [12] 1107 	nop
      000232 00               [12] 1108 	nop
                                   1109 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:215: DS1302_CLK = 0;
                                   1110 ;	assignBit
      000233 C2 92            [12] 1111 	clr	_PORT_P1_2
                                   1112 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:220: __endasm;
      000235 00               [12] 1113 	nop
      000236 00               [12] 1114 	nop
      000237 00               [12] 1115 	nop
                                   1116 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:221: DS1302_DATA_6 = DS1302_IO;
                                   1117 ;	assignBit
      000238 A2 91            [12] 1118 	mov	c,_PORT_P1_1
      00023A 92 0E            [24] 1119 	mov	_DS1302_DATA_6,c
                                   1120 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:223: DS1302_CLK = 1;
                                   1121 ;	assignBit
      00023C D2 92            [12] 1122 	setb	_PORT_P1_2
                                   1123 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:229: __endasm;
      00023E 00               [12] 1124 	nop
      00023F 00               [12] 1125 	nop
      000240 00               [12] 1126 	nop
      000241 00               [12] 1127 	nop
                                   1128 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:230: DS1302_CLK = 0;
                                   1129 ;	assignBit
      000242 C2 92            [12] 1130 	clr	_PORT_P1_2
                                   1131 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:235: __endasm;
      000244 00               [12] 1132 	nop
      000245 00               [12] 1133 	nop
      000246 00               [12] 1134 	nop
                                   1135 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:236: DS1302_DATA_7 = DS1302_IO;
                                   1136 ;	assignBit
      000247 A2 91            [12] 1137 	mov	c,_PORT_P1_1
      000249 92 0F            [24] 1138 	mov	_DS1302_DATA_7,c
                                   1139 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:237: DS1302_CLK = 1;
                                   1140 ;	assignBit
      00024B D2 92            [12] 1141 	setb	_PORT_P1_2
                                   1142 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:243: __endasm;
      00024D 00               [12] 1143 	nop
      00024E 00               [12] 1144 	nop
      00024F 00               [12] 1145 	nop
      000250 00               [12] 1146 	nop
                                   1147 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:244: DS1302_CLK = 0;
                                   1148 ;	assignBit
      000251 C2 92            [12] 1149 	clr	_PORT_P1_2
                                   1150 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:246: return DS1302_DATA;
      000253 AD 21            [24] 1151 	mov	r5,_DS1302_DATA
                                   1152 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:354: ds1302.minutes = ds1302_read_byte(); //Read in minutes register
      000255 8D*01            [24] 1153 	mov	(_ds1302 + 0x0001),r5
                                   1154 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:355: ds1302.hour    = ds1302_read_byte(); //Read in hours register
                                   1155 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:123: DS1302_IO = 1;		//Stop driving I/O line
                                   1156 ;	assignBit
      000257 D2 91            [12] 1157 	setb	_PORT_P1_1
                                   1158 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:130: __endasm;
      000259 00               [12] 1159 	nop
      00025A 00               [12] 1160 	nop
      00025B 00               [12] 1161 	nop
                                   1162 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:131: DS1302_DATA_0 = DS1302_IO;
                                   1163 ;	assignBit
      00025C A2 91            [12] 1164 	mov	c,_PORT_P1_1
      00025E 92 08            [24] 1165 	mov	_DS1302_DATA_0,c
                                   1166 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:133: DS1302_CLK = 1;
                                   1167 ;	assignBit
      000260 D2 92            [12] 1168 	setb	_PORT_P1_2
                                   1169 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:139: __endasm;
      000262 00               [12] 1170 	nop
      000263 00               [12] 1171 	nop
      000264 00               [12] 1172 	nop
      000265 00               [12] 1173 	nop
                                   1174 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:140: DS1302_CLK = 0;
                                   1175 ;	assignBit
      000266 C2 92            [12] 1176 	clr	_PORT_P1_2
                                   1177 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:145: __endasm;
      000268 00               [12] 1178 	nop
      000269 00               [12] 1179 	nop
      00026A 00               [12] 1180 	nop
                                   1181 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:146: DS1302_DATA_1 = DS1302_IO;
                                   1182 ;	assignBit
      00026B A2 91            [12] 1183 	mov	c,_PORT_P1_1
      00026D 92 09            [24] 1184 	mov	_DS1302_DATA_1,c
                                   1185 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:148: DS1302_CLK = 1;
                                   1186 ;	assignBit
      00026F D2 92            [12] 1187 	setb	_PORT_P1_2
                                   1188 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:154: __endasm;
      000271 00               [12] 1189 	nop
      000272 00               [12] 1190 	nop
      000273 00               [12] 1191 	nop
      000274 00               [12] 1192 	nop
                                   1193 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:155: DS1302_CLK = 0;
                                   1194 ;	assignBit
      000275 C2 92            [12] 1195 	clr	_PORT_P1_2
                                   1196 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:160: __endasm;
      000277 00               [12] 1197 	nop
      000278 00               [12] 1198 	nop
      000279 00               [12] 1199 	nop
                                   1200 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:161: DS1302_DATA_2 = DS1302_IO;
                                   1201 ;	assignBit
      00027A A2 91            [12] 1202 	mov	c,_PORT_P1_1
      00027C 92 0A            [24] 1203 	mov	_DS1302_DATA_2,c
                                   1204 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:163: DS1302_CLK = 1;
                                   1205 ;	assignBit
      00027E D2 92            [12] 1206 	setb	_PORT_P1_2
                                   1207 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:169: __endasm;
      000280 00               [12] 1208 	nop
      000281 00               [12] 1209 	nop
      000282 00               [12] 1210 	nop
      000283 00               [12] 1211 	nop
                                   1212 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:170: DS1302_CLK = 0;
                                   1213 ;	assignBit
      000284 C2 92            [12] 1214 	clr	_PORT_P1_2
                                   1215 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:175: __endasm;
      000286 00               [12] 1216 	nop
      000287 00               [12] 1217 	nop
      000288 00               [12] 1218 	nop
                                   1219 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:176: DS1302_DATA_3 = DS1302_IO;
                                   1220 ;	assignBit
      000289 A2 91            [12] 1221 	mov	c,_PORT_P1_1
      00028B 92 0B            [24] 1222 	mov	_DS1302_DATA_3,c
                                   1223 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:178: DS1302_CLK = 1;
                                   1224 ;	assignBit
      00028D D2 92            [12] 1225 	setb	_PORT_P1_2
                                   1226 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:184: __endasm;
      00028F 00               [12] 1227 	nop
      000290 00               [12] 1228 	nop
      000291 00               [12] 1229 	nop
      000292 00               [12] 1230 	nop
                                   1231 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:185: DS1302_CLK = 0;
                                   1232 ;	assignBit
      000293 C2 92            [12] 1233 	clr	_PORT_P1_2
                                   1234 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:190: __endasm;
      000295 00               [12] 1235 	nop
      000296 00               [12] 1236 	nop
      000297 00               [12] 1237 	nop
                                   1238 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:191: DS1302_DATA_4 = DS1302_IO;
                                   1239 ;	assignBit
      000298 A2 91            [12] 1240 	mov	c,_PORT_P1_1
      00029A 92 0C            [24] 1241 	mov	_DS1302_DATA_4,c
                                   1242 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:193: DS1302_CLK = 1;
                                   1243 ;	assignBit
      00029C D2 92            [12] 1244 	setb	_PORT_P1_2
                                   1245 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:199: __endasm;
      00029E 00               [12] 1246 	nop
      00029F 00               [12] 1247 	nop
      0002A0 00               [12] 1248 	nop
      0002A1 00               [12] 1249 	nop
                                   1250 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:200: DS1302_CLK = 0;
                                   1251 ;	assignBit
      0002A2 C2 92            [12] 1252 	clr	_PORT_P1_2
                                   1253 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:205: __endasm;
      0002A4 00               [12] 1254 	nop
      0002A5 00               [12] 1255 	nop
      0002A6 00               [12] 1256 	nop
                                   1257 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:206: DS1302_DATA_5 = DS1302_IO;
                                   1258 ;	assignBit
      0002A7 A2 91            [12] 1259 	mov	c,_PORT_P1_1
      0002A9 92 0D            [24] 1260 	mov	_DS1302_DATA_5,c
                                   1261 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:208: DS1302_CLK = 1;
                                   1262 ;	assignBit
      0002AB D2 92            [12] 1263 	setb	_PORT_P1_2
                                   1264 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:214: __endasm;
      0002AD 00               [12] 1265 	nop
      0002AE 00               [12] 1266 	nop
      0002AF 00               [12] 1267 	nop
      0002B0 00               [12] 1268 	nop
                                   1269 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:215: DS1302_CLK = 0;
                                   1270 ;	assignBit
      0002B1 C2 92            [12] 1271 	clr	_PORT_P1_2
                                   1272 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:220: __endasm;
      0002B3 00               [12] 1273 	nop
      0002B4 00               [12] 1274 	nop
      0002B5 00               [12] 1275 	nop
                                   1276 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:221: DS1302_DATA_6 = DS1302_IO;
                                   1277 ;	assignBit
      0002B6 A2 91            [12] 1278 	mov	c,_PORT_P1_1
      0002B8 92 0E            [24] 1279 	mov	_DS1302_DATA_6,c
                                   1280 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:223: DS1302_CLK = 1;
                                   1281 ;	assignBit
      0002BA D2 92            [12] 1282 	setb	_PORT_P1_2
                                   1283 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:229: __endasm;
      0002BC 00               [12] 1284 	nop
      0002BD 00               [12] 1285 	nop
      0002BE 00               [12] 1286 	nop
      0002BF 00               [12] 1287 	nop
                                   1288 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:230: DS1302_CLK = 0;
                                   1289 ;	assignBit
      0002C0 C2 92            [12] 1290 	clr	_PORT_P1_2
                                   1291 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:235: __endasm;
      0002C2 00               [12] 1292 	nop
      0002C3 00               [12] 1293 	nop
      0002C4 00               [12] 1294 	nop
                                   1295 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:236: DS1302_DATA_7 = DS1302_IO;
                                   1296 ;	assignBit
      0002C5 A2 91            [12] 1297 	mov	c,_PORT_P1_1
      0002C7 92 0F            [24] 1298 	mov	_DS1302_DATA_7,c
                                   1299 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:237: DS1302_CLK = 1;
                                   1300 ;	assignBit
      0002C9 D2 92            [12] 1301 	setb	_PORT_P1_2
                                   1302 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:243: __endasm;
      0002CB 00               [12] 1303 	nop
      0002CC 00               [12] 1304 	nop
      0002CD 00               [12] 1305 	nop
      0002CE 00               [12] 1306 	nop
                                   1307 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:244: DS1302_CLK = 0;
                                   1308 ;	assignBit
      0002CF C2 92            [12] 1309 	clr	_PORT_P1_2
                                   1310 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:246: return DS1302_DATA;
      0002D1 AC 21            [24] 1311 	mov	r4,_DS1302_DATA
                                   1312 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:355: ds1302.hour    = ds1302_read_byte(); //Read in hours register
      0002D3 8C*02            [24] 1313 	mov	(_ds1302 + 0x0002),r4
                                   1314 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:356: ds1302.date    = ds1302_read_byte(); //Read in date register
                                   1315 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:123: DS1302_IO = 1;		//Stop driving I/O line
                                   1316 ;	assignBit
      0002D5 D2 91            [12] 1317 	setb	_PORT_P1_1
                                   1318 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:130: __endasm;
      0002D7 00               [12] 1319 	nop
      0002D8 00               [12] 1320 	nop
      0002D9 00               [12] 1321 	nop
                                   1322 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:131: DS1302_DATA_0 = DS1302_IO;
                                   1323 ;	assignBit
      0002DA A2 91            [12] 1324 	mov	c,_PORT_P1_1
      0002DC 92 08            [24] 1325 	mov	_DS1302_DATA_0,c
                                   1326 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:133: DS1302_CLK = 1;
                                   1327 ;	assignBit
      0002DE D2 92            [12] 1328 	setb	_PORT_P1_2
                                   1329 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:139: __endasm;
      0002E0 00               [12] 1330 	nop
      0002E1 00               [12] 1331 	nop
      0002E2 00               [12] 1332 	nop
      0002E3 00               [12] 1333 	nop
                                   1334 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:140: DS1302_CLK = 0;
                                   1335 ;	assignBit
      0002E4 C2 92            [12] 1336 	clr	_PORT_P1_2
                                   1337 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:145: __endasm;
      0002E6 00               [12] 1338 	nop
      0002E7 00               [12] 1339 	nop
      0002E8 00               [12] 1340 	nop
                                   1341 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:146: DS1302_DATA_1 = DS1302_IO;
                                   1342 ;	assignBit
      0002E9 A2 91            [12] 1343 	mov	c,_PORT_P1_1
      0002EB 92 09            [24] 1344 	mov	_DS1302_DATA_1,c
                                   1345 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:148: DS1302_CLK = 1;
                                   1346 ;	assignBit
      0002ED D2 92            [12] 1347 	setb	_PORT_P1_2
                                   1348 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:154: __endasm;
      0002EF 00               [12] 1349 	nop
      0002F0 00               [12] 1350 	nop
      0002F1 00               [12] 1351 	nop
      0002F2 00               [12] 1352 	nop
                                   1353 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:155: DS1302_CLK = 0;
                                   1354 ;	assignBit
      0002F3 C2 92            [12] 1355 	clr	_PORT_P1_2
                                   1356 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:160: __endasm;
      0002F5 00               [12] 1357 	nop
      0002F6 00               [12] 1358 	nop
      0002F7 00               [12] 1359 	nop
                                   1360 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:161: DS1302_DATA_2 = DS1302_IO;
                                   1361 ;	assignBit
      0002F8 A2 91            [12] 1362 	mov	c,_PORT_P1_1
      0002FA 92 0A            [24] 1363 	mov	_DS1302_DATA_2,c
                                   1364 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:163: DS1302_CLK = 1;
                                   1365 ;	assignBit
      0002FC D2 92            [12] 1366 	setb	_PORT_P1_2
                                   1367 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:169: __endasm;
      0002FE 00               [12] 1368 	nop
      0002FF 00               [12] 1369 	nop
      000300 00               [12] 1370 	nop
      000301 00               [12] 1371 	nop
                                   1372 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:170: DS1302_CLK = 0;
                                   1373 ;	assignBit
      000302 C2 92            [12] 1374 	clr	_PORT_P1_2
                                   1375 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:175: __endasm;
      000304 00               [12] 1376 	nop
      000305 00               [12] 1377 	nop
      000306 00               [12] 1378 	nop
                                   1379 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:176: DS1302_DATA_3 = DS1302_IO;
                                   1380 ;	assignBit
      000307 A2 91            [12] 1381 	mov	c,_PORT_P1_1
      000309 92 0B            [24] 1382 	mov	_DS1302_DATA_3,c
                                   1383 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:178: DS1302_CLK = 1;
                                   1384 ;	assignBit
      00030B D2 92            [12] 1385 	setb	_PORT_P1_2
                                   1386 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:184: __endasm;
      00030D 00               [12] 1387 	nop
      00030E 00               [12] 1388 	nop
      00030F 00               [12] 1389 	nop
      000310 00               [12] 1390 	nop
                                   1391 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:185: DS1302_CLK = 0;
                                   1392 ;	assignBit
      000311 C2 92            [12] 1393 	clr	_PORT_P1_2
                                   1394 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:190: __endasm;
      000313 00               [12] 1395 	nop
      000314 00               [12] 1396 	nop
      000315 00               [12] 1397 	nop
                                   1398 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:191: DS1302_DATA_4 = DS1302_IO;
                                   1399 ;	assignBit
      000316 A2 91            [12] 1400 	mov	c,_PORT_P1_1
      000318 92 0C            [24] 1401 	mov	_DS1302_DATA_4,c
                                   1402 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:193: DS1302_CLK = 1;
                                   1403 ;	assignBit
      00031A D2 92            [12] 1404 	setb	_PORT_P1_2
                                   1405 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:199: __endasm;
      00031C 00               [12] 1406 	nop
      00031D 00               [12] 1407 	nop
      00031E 00               [12] 1408 	nop
      00031F 00               [12] 1409 	nop
                                   1410 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:200: DS1302_CLK = 0;
                                   1411 ;	assignBit
      000320 C2 92            [12] 1412 	clr	_PORT_P1_2
                                   1413 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:205: __endasm;
      000322 00               [12] 1414 	nop
      000323 00               [12] 1415 	nop
      000324 00               [12] 1416 	nop
                                   1417 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:206: DS1302_DATA_5 = DS1302_IO;
                                   1418 ;	assignBit
      000325 A2 91            [12] 1419 	mov	c,_PORT_P1_1
      000327 92 0D            [24] 1420 	mov	_DS1302_DATA_5,c
                                   1421 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:208: DS1302_CLK = 1;
                                   1422 ;	assignBit
      000329 D2 92            [12] 1423 	setb	_PORT_P1_2
                                   1424 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:214: __endasm;
      00032B 00               [12] 1425 	nop
      00032C 00               [12] 1426 	nop
      00032D 00               [12] 1427 	nop
      00032E 00               [12] 1428 	nop
                                   1429 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:215: DS1302_CLK = 0;
                                   1430 ;	assignBit
      00032F C2 92            [12] 1431 	clr	_PORT_P1_2
                                   1432 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:220: __endasm;
      000331 00               [12] 1433 	nop
      000332 00               [12] 1434 	nop
      000333 00               [12] 1435 	nop
                                   1436 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:221: DS1302_DATA_6 = DS1302_IO;
                                   1437 ;	assignBit
      000334 A2 91            [12] 1438 	mov	c,_PORT_P1_1
      000336 92 0E            [24] 1439 	mov	_DS1302_DATA_6,c
                                   1440 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:223: DS1302_CLK = 1;
                                   1441 ;	assignBit
      000338 D2 92            [12] 1442 	setb	_PORT_P1_2
                                   1443 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:229: __endasm;
      00033A 00               [12] 1444 	nop
      00033B 00               [12] 1445 	nop
      00033C 00               [12] 1446 	nop
      00033D 00               [12] 1447 	nop
                                   1448 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:230: DS1302_CLK = 0;
                                   1449 ;	assignBit
      00033E C2 92            [12] 1450 	clr	_PORT_P1_2
                                   1451 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:235: __endasm;
      000340 00               [12] 1452 	nop
      000341 00               [12] 1453 	nop
      000342 00               [12] 1454 	nop
                                   1455 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:236: DS1302_DATA_7 = DS1302_IO;
                                   1456 ;	assignBit
      000343 A2 91            [12] 1457 	mov	c,_PORT_P1_1
      000345 92 0F            [24] 1458 	mov	_DS1302_DATA_7,c
                                   1459 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:237: DS1302_CLK = 1;
                                   1460 ;	assignBit
      000347 D2 92            [12] 1461 	setb	_PORT_P1_2
                                   1462 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:243: __endasm;
      000349 00               [12] 1463 	nop
      00034A 00               [12] 1464 	nop
      00034B 00               [12] 1465 	nop
      00034C 00               [12] 1466 	nop
                                   1467 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:244: DS1302_CLK = 0;
                                   1468 ;	assignBit
      00034D C2 92            [12] 1469 	clr	_PORT_P1_2
                                   1470 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:246: return DS1302_DATA;
      00034F AC 21            [24] 1471 	mov	r4,_DS1302_DATA
                                   1472 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:356: ds1302.date    = ds1302_read_byte(); //Read in date register
      000351 8C*03            [24] 1473 	mov	(_ds1302 + 0x0003),r4
                                   1474 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:357: ds1302.month   = ds1302_read_byte(); //Read in month register
                                   1475 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:123: DS1302_IO = 1;		//Stop driving I/O line
                                   1476 ;	assignBit
      000353 D2 91            [12] 1477 	setb	_PORT_P1_1
                                   1478 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:130: __endasm;
      000355 00               [12] 1479 	nop
      000356 00               [12] 1480 	nop
      000357 00               [12] 1481 	nop
                                   1482 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:131: DS1302_DATA_0 = DS1302_IO;
                                   1483 ;	assignBit
      000358 A2 91            [12] 1484 	mov	c,_PORT_P1_1
      00035A 92 08            [24] 1485 	mov	_DS1302_DATA_0,c
                                   1486 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:133: DS1302_CLK = 1;
                                   1487 ;	assignBit
      00035C D2 92            [12] 1488 	setb	_PORT_P1_2
                                   1489 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:139: __endasm;
      00035E 00               [12] 1490 	nop
      00035F 00               [12] 1491 	nop
      000360 00               [12] 1492 	nop
      000361 00               [12] 1493 	nop
                                   1494 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:140: DS1302_CLK = 0;
                                   1495 ;	assignBit
      000362 C2 92            [12] 1496 	clr	_PORT_P1_2
                                   1497 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:145: __endasm;
      000364 00               [12] 1498 	nop
      000365 00               [12] 1499 	nop
      000366 00               [12] 1500 	nop
                                   1501 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:146: DS1302_DATA_1 = DS1302_IO;
                                   1502 ;	assignBit
      000367 A2 91            [12] 1503 	mov	c,_PORT_P1_1
      000369 92 09            [24] 1504 	mov	_DS1302_DATA_1,c
                                   1505 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:148: DS1302_CLK = 1;
                                   1506 ;	assignBit
      00036B D2 92            [12] 1507 	setb	_PORT_P1_2
                                   1508 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:154: __endasm;
      00036D 00               [12] 1509 	nop
      00036E 00               [12] 1510 	nop
      00036F 00               [12] 1511 	nop
      000370 00               [12] 1512 	nop
                                   1513 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:155: DS1302_CLK = 0;
                                   1514 ;	assignBit
      000371 C2 92            [12] 1515 	clr	_PORT_P1_2
                                   1516 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:160: __endasm;
      000373 00               [12] 1517 	nop
      000374 00               [12] 1518 	nop
      000375 00               [12] 1519 	nop
                                   1520 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:161: DS1302_DATA_2 = DS1302_IO;
                                   1521 ;	assignBit
      000376 A2 91            [12] 1522 	mov	c,_PORT_P1_1
      000378 92 0A            [24] 1523 	mov	_DS1302_DATA_2,c
                                   1524 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:163: DS1302_CLK = 1;
                                   1525 ;	assignBit
      00037A D2 92            [12] 1526 	setb	_PORT_P1_2
                                   1527 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:169: __endasm;
      00037C 00               [12] 1528 	nop
      00037D 00               [12] 1529 	nop
      00037E 00               [12] 1530 	nop
      00037F 00               [12] 1531 	nop
                                   1532 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:170: DS1302_CLK = 0;
                                   1533 ;	assignBit
      000380 C2 92            [12] 1534 	clr	_PORT_P1_2
                                   1535 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:175: __endasm;
      000382 00               [12] 1536 	nop
      000383 00               [12] 1537 	nop
      000384 00               [12] 1538 	nop
                                   1539 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:176: DS1302_DATA_3 = DS1302_IO;
                                   1540 ;	assignBit
      000385 A2 91            [12] 1541 	mov	c,_PORT_P1_1
      000387 92 0B            [24] 1542 	mov	_DS1302_DATA_3,c
                                   1543 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:178: DS1302_CLK = 1;
                                   1544 ;	assignBit
      000389 D2 92            [12] 1545 	setb	_PORT_P1_2
                                   1546 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:184: __endasm;
      00038B 00               [12] 1547 	nop
      00038C 00               [12] 1548 	nop
      00038D 00               [12] 1549 	nop
      00038E 00               [12] 1550 	nop
                                   1551 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:185: DS1302_CLK = 0;
                                   1552 ;	assignBit
      00038F C2 92            [12] 1553 	clr	_PORT_P1_2
                                   1554 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:190: __endasm;
      000391 00               [12] 1555 	nop
      000392 00               [12] 1556 	nop
      000393 00               [12] 1557 	nop
                                   1558 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:191: DS1302_DATA_4 = DS1302_IO;
                                   1559 ;	assignBit
      000394 A2 91            [12] 1560 	mov	c,_PORT_P1_1
      000396 92 0C            [24] 1561 	mov	_DS1302_DATA_4,c
                                   1562 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:193: DS1302_CLK = 1;
                                   1563 ;	assignBit
      000398 D2 92            [12] 1564 	setb	_PORT_P1_2
                                   1565 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:199: __endasm;
      00039A 00               [12] 1566 	nop
      00039B 00               [12] 1567 	nop
      00039C 00               [12] 1568 	nop
      00039D 00               [12] 1569 	nop
                                   1570 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:200: DS1302_CLK = 0;
                                   1571 ;	assignBit
      00039E C2 92            [12] 1572 	clr	_PORT_P1_2
                                   1573 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:205: __endasm;
      0003A0 00               [12] 1574 	nop
      0003A1 00               [12] 1575 	nop
      0003A2 00               [12] 1576 	nop
                                   1577 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:206: DS1302_DATA_5 = DS1302_IO;
                                   1578 ;	assignBit
      0003A3 A2 91            [12] 1579 	mov	c,_PORT_P1_1
      0003A5 92 0D            [24] 1580 	mov	_DS1302_DATA_5,c
                                   1581 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:208: DS1302_CLK = 1;
                                   1582 ;	assignBit
      0003A7 D2 92            [12] 1583 	setb	_PORT_P1_2
                                   1584 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:214: __endasm;
      0003A9 00               [12] 1585 	nop
      0003AA 00               [12] 1586 	nop
      0003AB 00               [12] 1587 	nop
      0003AC 00               [12] 1588 	nop
                                   1589 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:215: DS1302_CLK = 0;
                                   1590 ;	assignBit
      0003AD C2 92            [12] 1591 	clr	_PORT_P1_2
                                   1592 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:220: __endasm;
      0003AF 00               [12] 1593 	nop
      0003B0 00               [12] 1594 	nop
      0003B1 00               [12] 1595 	nop
                                   1596 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:221: DS1302_DATA_6 = DS1302_IO;
                                   1597 ;	assignBit
      0003B2 A2 91            [12] 1598 	mov	c,_PORT_P1_1
      0003B4 92 0E            [24] 1599 	mov	_DS1302_DATA_6,c
                                   1600 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:223: DS1302_CLK = 1;
                                   1601 ;	assignBit
      0003B6 D2 92            [12] 1602 	setb	_PORT_P1_2
                                   1603 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:229: __endasm;
      0003B8 00               [12] 1604 	nop
      0003B9 00               [12] 1605 	nop
      0003BA 00               [12] 1606 	nop
      0003BB 00               [12] 1607 	nop
                                   1608 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:230: DS1302_CLK = 0;
                                   1609 ;	assignBit
      0003BC C2 92            [12] 1610 	clr	_PORT_P1_2
                                   1611 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:235: __endasm;
      0003BE 00               [12] 1612 	nop
      0003BF 00               [12] 1613 	nop
      0003C0 00               [12] 1614 	nop
                                   1615 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:236: DS1302_DATA_7 = DS1302_IO;
                                   1616 ;	assignBit
      0003C1 A2 91            [12] 1617 	mov	c,_PORT_P1_1
      0003C3 92 0F            [24] 1618 	mov	_DS1302_DATA_7,c
                                   1619 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:237: DS1302_CLK = 1;
                                   1620 ;	assignBit
      0003C5 D2 92            [12] 1621 	setb	_PORT_P1_2
                                   1622 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:243: __endasm;
      0003C7 00               [12] 1623 	nop
      0003C8 00               [12] 1624 	nop
      0003C9 00               [12] 1625 	nop
      0003CA 00               [12] 1626 	nop
                                   1627 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:244: DS1302_CLK = 0;
                                   1628 ;	assignBit
      0003CB C2 92            [12] 1629 	clr	_PORT_P1_2
                                   1630 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:246: return DS1302_DATA;
      0003CD AC 21            [24] 1631 	mov	r4,_DS1302_DATA
                                   1632 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:357: ds1302.month   = ds1302_read_byte(); //Read in month register
      0003CF 8C*04            [24] 1633 	mov	(_ds1302 + 0x0004),r4
                                   1634 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:358: ds1302.day 	   = ds1302_read_byte(); //Read in day of week register
                                   1635 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:123: DS1302_IO = 1;		//Stop driving I/O line
                                   1636 ;	assignBit
      0003D1 D2 91            [12] 1637 	setb	_PORT_P1_1
                                   1638 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:130: __endasm;
      0003D3 00               [12] 1639 	nop
      0003D4 00               [12] 1640 	nop
      0003D5 00               [12] 1641 	nop
                                   1642 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:131: DS1302_DATA_0 = DS1302_IO;
                                   1643 ;	assignBit
      0003D6 A2 91            [12] 1644 	mov	c,_PORT_P1_1
      0003D8 92 08            [24] 1645 	mov	_DS1302_DATA_0,c
                                   1646 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:133: DS1302_CLK = 1;
                                   1647 ;	assignBit
      0003DA D2 92            [12] 1648 	setb	_PORT_P1_2
                                   1649 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:139: __endasm;
      0003DC 00               [12] 1650 	nop
      0003DD 00               [12] 1651 	nop
      0003DE 00               [12] 1652 	nop
      0003DF 00               [12] 1653 	nop
                                   1654 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:140: DS1302_CLK = 0;
                                   1655 ;	assignBit
      0003E0 C2 92            [12] 1656 	clr	_PORT_P1_2
                                   1657 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:145: __endasm;
      0003E2 00               [12] 1658 	nop
      0003E3 00               [12] 1659 	nop
      0003E4 00               [12] 1660 	nop
                                   1661 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:146: DS1302_DATA_1 = DS1302_IO;
                                   1662 ;	assignBit
      0003E5 A2 91            [12] 1663 	mov	c,_PORT_P1_1
      0003E7 92 09            [24] 1664 	mov	_DS1302_DATA_1,c
                                   1665 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:148: DS1302_CLK = 1;
                                   1666 ;	assignBit
      0003E9 D2 92            [12] 1667 	setb	_PORT_P1_2
                                   1668 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:154: __endasm;
      0003EB 00               [12] 1669 	nop
      0003EC 00               [12] 1670 	nop
      0003ED 00               [12] 1671 	nop
      0003EE 00               [12] 1672 	nop
                                   1673 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:155: DS1302_CLK = 0;
                                   1674 ;	assignBit
      0003EF C2 92            [12] 1675 	clr	_PORT_P1_2
                                   1676 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:160: __endasm;
      0003F1 00               [12] 1677 	nop
      0003F2 00               [12] 1678 	nop
      0003F3 00               [12] 1679 	nop
                                   1680 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:161: DS1302_DATA_2 = DS1302_IO;
                                   1681 ;	assignBit
      0003F4 A2 91            [12] 1682 	mov	c,_PORT_P1_1
      0003F6 92 0A            [24] 1683 	mov	_DS1302_DATA_2,c
                                   1684 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:163: DS1302_CLK = 1;
                                   1685 ;	assignBit
      0003F8 D2 92            [12] 1686 	setb	_PORT_P1_2
                                   1687 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:169: __endasm;
      0003FA 00               [12] 1688 	nop
      0003FB 00               [12] 1689 	nop
      0003FC 00               [12] 1690 	nop
      0003FD 00               [12] 1691 	nop
                                   1692 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:170: DS1302_CLK = 0;
                                   1693 ;	assignBit
      0003FE C2 92            [12] 1694 	clr	_PORT_P1_2
                                   1695 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:175: __endasm;
      000400 00               [12] 1696 	nop
      000401 00               [12] 1697 	nop
      000402 00               [12] 1698 	nop
                                   1699 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:176: DS1302_DATA_3 = DS1302_IO;
                                   1700 ;	assignBit
      000403 A2 91            [12] 1701 	mov	c,_PORT_P1_1
      000405 92 0B            [24] 1702 	mov	_DS1302_DATA_3,c
                                   1703 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:178: DS1302_CLK = 1;
                                   1704 ;	assignBit
      000407 D2 92            [12] 1705 	setb	_PORT_P1_2
                                   1706 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:184: __endasm;
      000409 00               [12] 1707 	nop
      00040A 00               [12] 1708 	nop
      00040B 00               [12] 1709 	nop
      00040C 00               [12] 1710 	nop
                                   1711 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:185: DS1302_CLK = 0;
                                   1712 ;	assignBit
      00040D C2 92            [12] 1713 	clr	_PORT_P1_2
                                   1714 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:190: __endasm;
      00040F 00               [12] 1715 	nop
      000410 00               [12] 1716 	nop
      000411 00               [12] 1717 	nop
                                   1718 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:191: DS1302_DATA_4 = DS1302_IO;
                                   1719 ;	assignBit
      000412 A2 91            [12] 1720 	mov	c,_PORT_P1_1
      000414 92 0C            [24] 1721 	mov	_DS1302_DATA_4,c
                                   1722 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:193: DS1302_CLK = 1;
                                   1723 ;	assignBit
      000416 D2 92            [12] 1724 	setb	_PORT_P1_2
                                   1725 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:199: __endasm;
      000418 00               [12] 1726 	nop
      000419 00               [12] 1727 	nop
      00041A 00               [12] 1728 	nop
      00041B 00               [12] 1729 	nop
                                   1730 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:200: DS1302_CLK = 0;
                                   1731 ;	assignBit
      00041C C2 92            [12] 1732 	clr	_PORT_P1_2
                                   1733 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:205: __endasm;
      00041E 00               [12] 1734 	nop
      00041F 00               [12] 1735 	nop
      000420 00               [12] 1736 	nop
                                   1737 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:206: DS1302_DATA_5 = DS1302_IO;
                                   1738 ;	assignBit
      000421 A2 91            [12] 1739 	mov	c,_PORT_P1_1
      000423 92 0D            [24] 1740 	mov	_DS1302_DATA_5,c
                                   1741 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:208: DS1302_CLK = 1;
                                   1742 ;	assignBit
      000425 D2 92            [12] 1743 	setb	_PORT_P1_2
                                   1744 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:214: __endasm;
      000427 00               [12] 1745 	nop
      000428 00               [12] 1746 	nop
      000429 00               [12] 1747 	nop
      00042A 00               [12] 1748 	nop
                                   1749 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:215: DS1302_CLK = 0;
                                   1750 ;	assignBit
      00042B C2 92            [12] 1751 	clr	_PORT_P1_2
                                   1752 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:220: __endasm;
      00042D 00               [12] 1753 	nop
      00042E 00               [12] 1754 	nop
      00042F 00               [12] 1755 	nop
                                   1756 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:221: DS1302_DATA_6 = DS1302_IO;
                                   1757 ;	assignBit
      000430 A2 91            [12] 1758 	mov	c,_PORT_P1_1
      000432 92 0E            [24] 1759 	mov	_DS1302_DATA_6,c
                                   1760 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:223: DS1302_CLK = 1;
                                   1761 ;	assignBit
      000434 D2 92            [12] 1762 	setb	_PORT_P1_2
                                   1763 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:229: __endasm;
      000436 00               [12] 1764 	nop
      000437 00               [12] 1765 	nop
      000438 00               [12] 1766 	nop
      000439 00               [12] 1767 	nop
                                   1768 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:230: DS1302_CLK = 0;
                                   1769 ;	assignBit
      00043A C2 92            [12] 1770 	clr	_PORT_P1_2
                                   1771 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:235: __endasm;
      00043C 00               [12] 1772 	nop
      00043D 00               [12] 1773 	nop
      00043E 00               [12] 1774 	nop
                                   1775 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:236: DS1302_DATA_7 = DS1302_IO;
                                   1776 ;	assignBit
      00043F A2 91            [12] 1777 	mov	c,_PORT_P1_1
      000441 92 0F            [24] 1778 	mov	_DS1302_DATA_7,c
                                   1779 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:237: DS1302_CLK = 1;
                                   1780 ;	assignBit
      000443 D2 92            [12] 1781 	setb	_PORT_P1_2
                                   1782 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:243: __endasm;
      000445 00               [12] 1783 	nop
      000446 00               [12] 1784 	nop
      000447 00               [12] 1785 	nop
      000448 00               [12] 1786 	nop
                                   1787 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:244: DS1302_CLK = 0;
                                   1788 ;	assignBit
      000449 C2 92            [12] 1789 	clr	_PORT_P1_2
                                   1790 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:246: return DS1302_DATA;
      00044B AC 21            [24] 1791 	mov	r4,_DS1302_DATA
                                   1792 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:358: ds1302.day 	   = ds1302_read_byte(); //Read in day of week register
      00044D 8C*05            [24] 1793 	mov	(_ds1302 + 0x0005),r4
                                   1794 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:359: ds1302.year    = ds1302_read_byte(); //Read in year register
                                   1795 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:123: DS1302_IO = 1;		//Stop driving I/O line
                                   1796 ;	assignBit
      00044F D2 91            [12] 1797 	setb	_PORT_P1_1
                                   1798 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:130: __endasm;
      000451 00               [12] 1799 	nop
      000452 00               [12] 1800 	nop
      000453 00               [12] 1801 	nop
                                   1802 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:131: DS1302_DATA_0 = DS1302_IO;
                                   1803 ;	assignBit
      000454 A2 91            [12] 1804 	mov	c,_PORT_P1_1
      000456 92 08            [24] 1805 	mov	_DS1302_DATA_0,c
                                   1806 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:133: DS1302_CLK = 1;
                                   1807 ;	assignBit
      000458 D2 92            [12] 1808 	setb	_PORT_P1_2
                                   1809 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:139: __endasm;
      00045A 00               [12] 1810 	nop
      00045B 00               [12] 1811 	nop
      00045C 00               [12] 1812 	nop
      00045D 00               [12] 1813 	nop
                                   1814 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:140: DS1302_CLK = 0;
                                   1815 ;	assignBit
      00045E C2 92            [12] 1816 	clr	_PORT_P1_2
                                   1817 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:145: __endasm;
      000460 00               [12] 1818 	nop
      000461 00               [12] 1819 	nop
      000462 00               [12] 1820 	nop
                                   1821 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:146: DS1302_DATA_1 = DS1302_IO;
                                   1822 ;	assignBit
      000463 A2 91            [12] 1823 	mov	c,_PORT_P1_1
      000465 92 09            [24] 1824 	mov	_DS1302_DATA_1,c
                                   1825 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:148: DS1302_CLK = 1;
                                   1826 ;	assignBit
      000467 D2 92            [12] 1827 	setb	_PORT_P1_2
                                   1828 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:154: __endasm;
      000469 00               [12] 1829 	nop
      00046A 00               [12] 1830 	nop
      00046B 00               [12] 1831 	nop
      00046C 00               [12] 1832 	nop
                                   1833 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:155: DS1302_CLK = 0;
                                   1834 ;	assignBit
      00046D C2 92            [12] 1835 	clr	_PORT_P1_2
                                   1836 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:160: __endasm;
      00046F 00               [12] 1837 	nop
      000470 00               [12] 1838 	nop
      000471 00               [12] 1839 	nop
                                   1840 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:161: DS1302_DATA_2 = DS1302_IO;
                                   1841 ;	assignBit
      000472 A2 91            [12] 1842 	mov	c,_PORT_P1_1
      000474 92 0A            [24] 1843 	mov	_DS1302_DATA_2,c
                                   1844 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:163: DS1302_CLK = 1;
                                   1845 ;	assignBit
      000476 D2 92            [12] 1846 	setb	_PORT_P1_2
                                   1847 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:169: __endasm;
      000478 00               [12] 1848 	nop
      000479 00               [12] 1849 	nop
      00047A 00               [12] 1850 	nop
      00047B 00               [12] 1851 	nop
                                   1852 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:170: DS1302_CLK = 0;
                                   1853 ;	assignBit
      00047C C2 92            [12] 1854 	clr	_PORT_P1_2
                                   1855 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:175: __endasm;
      00047E 00               [12] 1856 	nop
      00047F 00               [12] 1857 	nop
      000480 00               [12] 1858 	nop
                                   1859 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:176: DS1302_DATA_3 = DS1302_IO;
                                   1860 ;	assignBit
      000481 A2 91            [12] 1861 	mov	c,_PORT_P1_1
      000483 92 0B            [24] 1862 	mov	_DS1302_DATA_3,c
                                   1863 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:178: DS1302_CLK = 1;
                                   1864 ;	assignBit
      000485 D2 92            [12] 1865 	setb	_PORT_P1_2
                                   1866 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:184: __endasm;
      000487 00               [12] 1867 	nop
      000488 00               [12] 1868 	nop
      000489 00               [12] 1869 	nop
      00048A 00               [12] 1870 	nop
                                   1871 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:185: DS1302_CLK = 0;
                                   1872 ;	assignBit
      00048B C2 92            [12] 1873 	clr	_PORT_P1_2
                                   1874 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:190: __endasm;
      00048D 00               [12] 1875 	nop
      00048E 00               [12] 1876 	nop
      00048F 00               [12] 1877 	nop
                                   1878 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:191: DS1302_DATA_4 = DS1302_IO;
                                   1879 ;	assignBit
      000490 A2 91            [12] 1880 	mov	c,_PORT_P1_1
      000492 92 0C            [24] 1881 	mov	_DS1302_DATA_4,c
                                   1882 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:193: DS1302_CLK = 1;
                                   1883 ;	assignBit
      000494 D2 92            [12] 1884 	setb	_PORT_P1_2
                                   1885 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:199: __endasm;
      000496 00               [12] 1886 	nop
      000497 00               [12] 1887 	nop
      000498 00               [12] 1888 	nop
      000499 00               [12] 1889 	nop
                                   1890 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:200: DS1302_CLK = 0;
                                   1891 ;	assignBit
      00049A C2 92            [12] 1892 	clr	_PORT_P1_2
                                   1893 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:205: __endasm;
      00049C 00               [12] 1894 	nop
      00049D 00               [12] 1895 	nop
      00049E 00               [12] 1896 	nop
                                   1897 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:206: DS1302_DATA_5 = DS1302_IO;
                                   1898 ;	assignBit
      00049F A2 91            [12] 1899 	mov	c,_PORT_P1_1
      0004A1 92 0D            [24] 1900 	mov	_DS1302_DATA_5,c
                                   1901 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:208: DS1302_CLK = 1;
                                   1902 ;	assignBit
      0004A3 D2 92            [12] 1903 	setb	_PORT_P1_2
                                   1904 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:214: __endasm;
      0004A5 00               [12] 1905 	nop
      0004A6 00               [12] 1906 	nop
      0004A7 00               [12] 1907 	nop
      0004A8 00               [12] 1908 	nop
                                   1909 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:215: DS1302_CLK = 0;
                                   1910 ;	assignBit
      0004A9 C2 92            [12] 1911 	clr	_PORT_P1_2
                                   1912 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:220: __endasm;
      0004AB 00               [12] 1913 	nop
      0004AC 00               [12] 1914 	nop
      0004AD 00               [12] 1915 	nop
                                   1916 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:221: DS1302_DATA_6 = DS1302_IO;
                                   1917 ;	assignBit
      0004AE A2 91            [12] 1918 	mov	c,_PORT_P1_1
      0004B0 92 0E            [24] 1919 	mov	_DS1302_DATA_6,c
                                   1920 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:223: DS1302_CLK = 1;
                                   1921 ;	assignBit
      0004B2 D2 92            [12] 1922 	setb	_PORT_P1_2
                                   1923 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:229: __endasm;
      0004B4 00               [12] 1924 	nop
      0004B5 00               [12] 1925 	nop
      0004B6 00               [12] 1926 	nop
      0004B7 00               [12] 1927 	nop
                                   1928 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:230: DS1302_CLK = 0;
                                   1929 ;	assignBit
      0004B8 C2 92            [12] 1930 	clr	_PORT_P1_2
                                   1931 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:235: __endasm;
      0004BA 00               [12] 1932 	nop
      0004BB 00               [12] 1933 	nop
      0004BC 00               [12] 1934 	nop
                                   1935 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:236: DS1302_DATA_7 = DS1302_IO;
                                   1936 ;	assignBit
      0004BD A2 91            [12] 1937 	mov	c,_PORT_P1_1
      0004BF 92 0F            [24] 1938 	mov	_DS1302_DATA_7,c
                                   1939 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:237: DS1302_CLK = 1;
                                   1940 ;	assignBit
      0004C1 D2 92            [12] 1941 	setb	_PORT_P1_2
                                   1942 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:243: __endasm;
      0004C3 00               [12] 1943 	nop
      0004C4 00               [12] 1944 	nop
      0004C5 00               [12] 1945 	nop
      0004C6 00               [12] 1946 	nop
                                   1947 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:244: DS1302_CLK = 0;
                                   1948 ;	assignBit
      0004C7 C2 92            [12] 1949 	clr	_PORT_P1_2
                                   1950 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:246: return DS1302_DATA;
      0004C9 AC 21            [24] 1951 	mov	r4,_DS1302_DATA
                                   1952 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:359: ds1302.year    = ds1302_read_byte(); //Read in year register
      0004CB 8C*06            [24] 1953 	mov	(_ds1302 + 0x0006),r4
                                   1954 ;	/home/shenghao/workspace/TESTMCS51/ds1302.h:322: DS1302_CE = 0; //Drop CE to end communication.
                                   1955 ;	assignBit
      0004CD C2 90            [12] 1956 	clr	_PORT_P1_0
                                   1957 ;	../fsm.c:100: if((alarm_lastpoll != ds1302.minutes) && alarm_global_state()){
      0004CF ED               [12] 1958 	mov	a,r5
      0004D0 B5*00 03         [24] 1959 	cjne	a,_alarm_lastpoll,00297$
      0004D3 02r05r6E         [24] 1960 	ljmp	00143$
      0004D6                       1961 00297$:
                                   1962 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:84: return (ds1302_sram_data[3] & 0x01);
      0004D6 90r00r03         [24] 1963 	mov	dptr,#(_ds1302_sram_data + 0x0003)
      0004D9 E0               [24] 1964 	movx	a,@dptr
      0004DA FD               [12] 1965 	mov	r5,a
      0004DB 20 E0 03         [24] 1966 	jb	acc.0,00298$
      0004DE 02r05r6E         [24] 1967 	ljmp	00143$
      0004E1                       1968 00298$:
                                   1969 ;	../fsm.c:100: if((alarm_lastpoll != ds1302.minutes) && alarm_global_state()){
                                   1970 ;	../fsm.c:116: alarm_lastpoll = ds1302.minutes;
      0004E1 7D 00            [12] 1971 	mov	r5,#0x00
      0004E3                       1972 00182$:
                                   1973 ;	../fsm.c:102: for(;alarm_index < NUM_ALARMS;alarm_index++){
      0004E3 BD 07 00         [24] 1974 	cjne	r5,#0x07,00299$
      0004E6                       1975 00299$:
      0004E6 40 03            [24] 1976 	jc	00300$
      0004E8 02r05r6B         [24] 1977 	ljmp	00141$
      0004EB                       1978 00300$:
                                   1979 ;	../fsm.c:103: if(alarm_dow_state(alarm_index,ds1302.day) && (
      0004EB C0 06            [24] 1980 	push	ar6
                                   1981 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:106: return ((alarms[index].dow_and_enable >> dow) & 0x01);
      0004ED ED               [12] 1982 	mov	a,r5
      0004EE 75 F0 03         [24] 1983 	mov	b,#0x03
      0004F1 A4               [48] 1984 	mul	ab
      0004F2 FB               [12] 1985 	mov	r3,a
      0004F3 AC F0            [24] 1986 	mov	r4,b
      0004F5 24 04            [12] 1987 	add	a,#_alarms
      0004F7 FA               [12] 1988 	mov	r2,a
      0004F8 EC               [12] 1989 	mov	a,r4
      0004F9 34 00            [12] 1990 	addc	a,#(_alarms >> 8)
      0004FB FE               [12] 1991 	mov	r6,a
      0004FC 8A 82            [24] 1992 	mov	dpl,r2
      0004FE 8E 83            [24] 1993 	mov	dph,r6
      000500 A3               [24] 1994 	inc	dptr
      000501 A3               [24] 1995 	inc	dptr
      000502 E0               [24] 1996 	movx	a,@dptr
      000503 FE               [12] 1997 	mov	r6,a
      000504 85*05 F0         [24] 1998 	mov	b,(_ds1302 + 0x0005)
      000507 05 F0            [12] 1999 	inc	b
      000509 EE               [12] 2000 	mov	a,r6
      00050A 80 02            [24] 2001 	sjmp	00302$
      00050C                       2002 00301$:
      00050C C3               [12] 2003 	clr	c
      00050D 13               [12] 2004 	rrc	a
      00050E                       2005 00302$:
      00050E D5 F0 FB         [24] 2006 	djnz	b,00301$
      000511 D0 06            [24] 2007 	pop	ar6
      000513 30 E0 51         [24] 2008 	jnb	acc.0,00183$
                                   2009 ;	../fsm.c:103: if(alarm_dow_state(alarm_index,ds1302.day) && (
                                   2010 ;	../fsm.c:104: alarms[alarm_index].dow_and_enable & 0x01)){
      000516 C0 06            [24] 2011 	push	ar6
      000518 EB               [12] 2012 	mov	a,r3
      000519 24 04            [12] 2013 	add	a,#_alarms
      00051B FA               [12] 2014 	mov	r2,a
      00051C EC               [12] 2015 	mov	a,r4
      00051D 34 00            [12] 2016 	addc	a,#(_alarms >> 8)
      00051F FE               [12] 2017 	mov	r6,a
      000520 8A 82            [24] 2018 	mov	dpl,r2
      000522 8E 83            [24] 2019 	mov	dph,r6
      000524 A3               [24] 2020 	inc	dptr
      000525 A3               [24] 2021 	inc	dptr
      000526 E0               [24] 2022 	movx	a,@dptr
      000527 D0 06            [24] 2023 	pop	ar6
      000529 30 E0 3B         [24] 2024 	jnb	acc.0,00183$
                                   2025 ;	../fsm.c:105: if((alarms[alarm_index].hour == ds1302.hour) &&
      00052C EB               [12] 2026 	mov	a,r3
      00052D 24 04            [12] 2027 	add	a,#_alarms
      00052F F5 82            [12] 2028 	mov	dpl,a
      000531 EC               [12] 2029 	mov	a,r4
      000532 34 00            [12] 2030 	addc	a,#(_alarms >> 8)
      000534 F5 83            [12] 2031 	mov	dph,a
      000536 E0               [24] 2032 	movx	a,@dptr
      000537 FA               [12] 2033 	mov	r2,a
      000538 B5*02 2C         [24] 2034 	cjne	a,(_ds1302 + 0x0002),00183$
                                   2035 ;	../fsm.c:106: (alarms[alarm_index].minute == ds1302.minutes)){
      00053B EB               [12] 2036 	mov	a,r3
      00053C 24 04            [12] 2037 	add	a,#_alarms
      00053E FB               [12] 2038 	mov	r3,a
      00053F EC               [12] 2039 	mov	a,r4
      000540 34 00            [12] 2040 	addc	a,#(_alarms >> 8)
      000542 FC               [12] 2041 	mov	r4,a
      000543 8B 82            [24] 2042 	mov	dpl,r3
      000545 8C 83            [24] 2043 	mov	dph,r4
      000547 A3               [24] 2044 	inc	dptr
      000548 E0               [24] 2045 	movx	a,@dptr
      000549 FC               [12] 2046 	mov	r4,a
      00054A B5*01 1A         [24] 2047 	cjne	a,(_ds1302 + 0x0001),00183$
                                   2048 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:130: INT_IE2 &= 0xfb;
      00054D 53 AF FB         [24] 2049 	anl	_INT_IE2,#0xfb
                                   2050 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:131: alarm_counter = 0x00;
      000550 E4               [12] 2051 	clr	a
      000551 F5*00            [12] 2052 	mov	_alarm_counter,a
      000553 F5*01            [12] 2053 	mov	(_alarm_counter + 1),a
                                   2054 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:132: INT_IE2 |= 0x04;
      000555 43 AF 04         [24] 2055 	orl	_INT_IE2,#0x04
                                   2056 ;	../fsm.c:108: display_autobrightness = 0;
                                   2057 ;	assignBit
      000558 C2 1F            [12] 2058 	clr	_display_autobrightness
                                   2059 ;	../fsm.c:109: INT_IE_EA = 0;
                                   2060 ;	assignBit
      00055A C2 AF            [12] 2061 	clr	_INT_IE_EA
                                   2062 ;	../fsm.c:110: display_counts = DISPLAY_COUNTS_MAX;
      00055C 75*00 00         [24] 2063 	mov	_display_counts,#0x00
      00055F 75*01 EA         [24] 2064 	mov	(_display_counts + 1),#0xea
                                   2065 ;	../fsm.c:111: INT_IE_EA = 1;
                                   2066 ;	assignBit
      000562 D2 AF            [12] 2067 	setb	_INT_IE_EA
                                   2068 ;	../fsm.c:112: curstate = fsm_home_alarm;
      000564 75*03 07         [24] 2069 	mov	_fsm_home_fn_curstate_1_169,#0x07
      000567                       2070 00183$:
                                   2071 ;	../fsm.c:102: for(;alarm_index < NUM_ALARMS;alarm_index++){
      000567 0D               [12] 2072 	inc	r5
      000568 02r04rE3         [24] 2073 	ljmp	00182$
      00056B                       2074 00141$:
                                   2075 ;	../fsm.c:116: alarm_lastpoll = ds1302.minutes;
      00056B 85*01*00         [24] 2076 	mov	_alarm_lastpoll,(_ds1302 + 0x0001)
      00056E                       2077 00143$:
                                   2078 ;	../fsm.c:119: switch(curstate) {
      00056E E5*03            [12] 2079 	mov	a,_fsm_home_fn_curstate_1_169
      000570 24 F8            [12] 2080 	add	a,#0xff - 0x07
      000572 50 03            [24] 2081 	jnc	00309$
      000574 02r06r85         [24] 2082 	ljmp	00163$
      000577                       2083 00309$:
      000577 E5*03            [12] 2084 	mov	a,_fsm_home_fn_curstate_1_169
      000579 24 0B            [12] 2085 	add	a,#(00310$-3-.)
      00057B 83               [24] 2086 	movc	a,@a+pc
      00057C F5 82            [12] 2087 	mov	dpl,a
      00057E E5*03            [12] 2088 	mov	a,_fsm_home_fn_curstate_1_169
      000580 24 0C            [12] 2089 	add	a,#(00311$-3-.)
      000582 83               [24] 2090 	movc	a,@a+pc
      000583 F5 83            [12] 2091 	mov	dph,a
      000585 E4               [12] 2092 	clr	a
      000586 73               [24] 2093 	jmp	@a+dptr
      000587                       2094 00310$:
      000587r97                    2095 	.db	00146$
      000588rD6                    2096 	.db	00154$
      000589rF6                    2097 	.db	00157$
      00058Ar50                    2098 	.db	00160$
      00058Br77                    2099 	.db	00161$
      00058Cr7C                    2100 	.db	00162$
      00058Dr85                    2101 	.db	00163$
      00058Er97                    2102 	.db	00146$
      00058F                       2103 00311$:
      00058Fs05                    2104 	.db	00146$>>8
      000590s05                    2105 	.db	00154$>>8
      000591s05                    2106 	.db	00157$>>8
      000592s06                    2107 	.db	00160$>>8
      000593s06                    2108 	.db	00161$>>8
      000594s06                    2109 	.db	00162$>>8
      000595s06                    2110 	.db	00163$>>8
      000596s05                    2111 	.db	00146$>>8
                                   2112 ;	../fsm.c:121: case fsm_home_time:
      000597                       2113 00146$:
                                   2114 ;	../fsm.c:123: if(curstate == fsm_home_alarm){
      000597 74 07            [12] 2115 	mov	a,#0x07
      000599 B5*03 1A         [24] 2116 	cjne	a,_fsm_home_fn_curstate_1_169,00151$
                                   2117 ;	../fsm.c:124: display_flash = 0x0f;
      00059C 75*00 0F         [24] 2118 	mov	_display_flash,#0x0f
                                   2119 ;	../fsm.c:125: if((menu_state == BUTTON_LONG_PRESSED) && (select_state == BUTTON_LONG_PRESSED)){
      00059F BF 01 14         [24] 2120 	cjne	r7,#0x01,00151$
      0005A2 BE 01 11         [24] 2121 	cjne	r6,#0x01,00151$
                                   2122 ;	../fsm.c:126: display_flash = 0x00;
      0005A5 75*00 00         [24] 2123 	mov	_display_flash,#0x00
                                   2124 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:149: INT_IE2 &= 0xfb;
      0005A8 53 AF FB         [24] 2125 	anl	_INT_IE2,#0xfb
                                   2126 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:150: INT_IE_EA = 0;
                                   2127 ;	assignBit
      0005AB C2 AF            [12] 2128 	clr	_INT_IE_EA
                                   2129 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:151: ALARM_BUZZER_DRIVE_INACTIVE();
                                   2130 ;	assignBit
      0005AD D2 95            [12] 2131 	setb	_PORT_P1_5
                                   2132 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:152: INT_IE_EA = 1;
                                   2133 ;	assignBit
      0005AF D2 AF            [12] 2134 	setb	_INT_IE_EA
                                   2135 ;	../fsm.c:128: display_autobrightness = 1;
                                   2136 ;	assignBit
      0005B1 D2 1F            [12] 2137 	setb	_display_autobrightness
                                   2138 ;	../fsm.c:129: curstate = fsm_home_start; //Reset state back to default
      0005B3 75*03 00         [24] 2139 	mov	_fsm_home_fn_curstate_1_169,#0x00
      0005B6                       2140 00151$:
                                   2141 ;	../fsm.c:132: display_puttime(ds1302.hour,ds1302.minutes);
      0005B6 85*02 82         [24] 2142 	mov	dpl,(_ds1302 + 0x0002)
      0005B9 85*01*00         [24] 2143 	mov	_display_puttime_PARM_2,(_ds1302 + 0x0001)
      0005BC 12r00r00         [24] 2144 	lcall	_display_puttime
                                   2145 ;	../fsm.c:133: if(ds1302.seconds % 2)
      0005BF E5*00            [12] 2146 	mov	a,_ds1302
      0005C1 20 E0 03         [24] 2147 	jb	acc.0,00318$
      0005C4 02r06r85         [24] 2148 	ljmp	00163$
      0005C7                       2149 00318$:
                                   2150 ;	/home/shenghao/workspace/TESTMCS51/display.h:116: display_buffer[1] &= 0x7f;
      0005C7 74 7F            [12] 2151 	mov	a,#0x7f
      0005C9 55*01            [12] 2152 	anl	a,(_display_buffer + 0x0001)
      0005CB F5*01            [12] 2153 	mov	(_display_buffer + 0x0001),a
                                   2154 ;	/home/shenghao/workspace/TESTMCS51/display.h:117: display_buffer[2] &= 0x7f;
      0005CD 74 7F            [12] 2155 	mov	a,#0x7f
      0005CF 55*02            [12] 2156 	anl	a,(_display_buffer + 0x0002)
      0005D1 F5*02            [12] 2157 	mov	(_display_buffer + 0x0002),a
                                   2158 ;	../fsm.c:135: break;
      0005D3 02r06r85         [24] 2159 	ljmp	00163$
                                   2160 ;	../fsm.c:136: case fsm_home_mmss:
      0005D6                       2161 00154$:
                                   2162 ;	../fsm.c:138: display_putbcd(ds1302.minutes,ds1302.seconds);
      0005D6 85*01 82         [24] 2163 	mov	dpl,(_ds1302 + 0x0001)
      0005D9 85*00*00         [24] 2164 	mov	_display_putbcd_PARM_2,_ds1302
      0005DC 12r00r00         [24] 2165 	lcall	_display_putbcd
                                   2166 ;	../fsm.c:139: if(ds1302.seconds % 2)
      0005DF E5*00            [12] 2167 	mov	a,_ds1302
      0005E1 20 E0 03         [24] 2168 	jb	acc.0,00319$
      0005E4 02r06r85         [24] 2169 	ljmp	00163$
      0005E7                       2170 00319$:
                                   2171 ;	/home/shenghao/workspace/TESTMCS51/display.h:116: display_buffer[1] &= 0x7f;
      0005E7 74 7F            [12] 2172 	mov	a,#0x7f
      0005E9 55*01            [12] 2173 	anl	a,(_display_buffer + 0x0001)
      0005EB F5*01            [12] 2174 	mov	(_display_buffer + 0x0001),a
                                   2175 ;	/home/shenghao/workspace/TESTMCS51/display.h:117: display_buffer[2] &= 0x7f;
      0005ED 74 7F            [12] 2176 	mov	a,#0x7f
      0005EF 55*02            [12] 2177 	anl	a,(_display_buffer + 0x0002)
      0005F1 F5*02            [12] 2178 	mov	(_display_buffer + 0x0002),a
                                   2179 ;	../fsm.c:141: break;
      0005F3 02r06r85         [24] 2180 	ljmp	00163$
                                   2181 ;	../fsm.c:142: case fsm_home_temp:
      0005F6                       2182 00157$:
                                   2183 ;	../fsm.c:143: temp_cache = EEPROM_TEMP_FROM_THERMISTOR_TABLE[adc_get_thermistor()];
                                   2184 ;	/home/shenghao/workspace/TESTMCS51/adc.h:147: INT_IE_EADC = 0;				//Disable ADC interrupt
                                   2185 ;	assignBit
      0005F6 C2 AD            [12] 2186 	clr	_INT_IE_EADC
                                   2187 ;	/home/shenghao/workspace/TESTMCS51/adc.h:148: tmp = adc_thermistor_reading;	//Store temporary result
      0005F8 AE*00            [24] 2188 	mov	r6,_adc_thermistor_reading
      0005FA AF*01            [24] 2189 	mov	r7,(_adc_thermistor_reading + 1)
                                   2190 ;	/home/shenghao/workspace/TESTMCS51/adc.h:149: INT_IE_EADC = 1;				//Enable ADC interrupt
                                   2191 ;	assignBit
      0005FC D2 AD            [12] 2192 	setb	_INT_IE_EADC
                                   2193 ;	../fsm.c:143: temp_cache = EEPROM_TEMP_FROM_THERMISTOR_TABLE[adc_get_thermistor()];
      0005FE EE               [12] 2194 	mov	a,r6
      0005FF 2E               [12] 2195 	add	a,r6
      000600 FE               [12] 2196 	mov	r6,a
      000601 EF               [12] 2197 	mov	a,r7
      000602 33               [12] 2198 	rlc	a
      000603 FF               [12] 2199 	mov	r7,a
      000604 8E 82            [24] 2200 	mov	dpl,r6
      000606 74s00            [12] 2201 	mov	a,#(_EEPROM_TEMP_FROM_THERMISTOR_TABLE >> 8)
      000608 2F               [12] 2202 	add	a,r7
      000609 F5 83            [12] 2203 	mov	dph,a
      00060B E4               [12] 2204 	clr	a
      00060C 93               [24] 2205 	movc	a,@a+dptr
      00060D FE               [12] 2206 	mov	r6,a
      00060E A3               [24] 2207 	inc	dptr
      00060F E4               [12] 2208 	clr	a
      000610 93               [24] 2209 	movc	a,@a+dptr
      000611 FF               [12] 2210 	mov	r7,a
                                   2211 ;	../fsm.c:144: temp_cache = bcd_add_16(temp_cache,(ds1302_sram_data[DS1302_BBSRAM_SIZE-2] |
      000612 90r00r1D         [24] 2212 	mov	dptr,#(_ds1302_sram_data + 0x001d)
      000615 E0               [24] 2213 	movx	a,@dptr
      000616 FD               [12] 2214 	mov	r5,a
                                   2215 ;	../fsm.c:145: (ds1302_sram_data[DS1302_BBSRAM_SIZE-1] << 0x08)));
      000617 90r00r1E         [24] 2216 	mov	dptr,#(_ds1302_sram_data + 0x001e)
      00061A E0               [24] 2217 	movx	a,@dptr
      00061B FB               [12] 2218 	mov	r3,a
      00061C E4               [12] 2219 	clr	a
      00061D FA               [12] 2220 	mov	r2,a
      00061E 4D               [12] 2221 	orl	a,r5
      00061F F5*00            [12] 2222 	mov	_bcd_add_16_PARM_2,a
      000621 EB               [12] 2223 	mov	a,r3
      000622 4A               [12] 2224 	orl	a,r2
      000623 F5*01            [12] 2225 	mov	(_bcd_add_16_PARM_2 + 1),a
      000625 8E 82            [24] 2226 	mov	dpl,r6
      000627 8F 83            [24] 2227 	mov	dph,r7
      000629 12r00r00         [24] 2228 	lcall	_bcd_add_16
      00062C AC 82            [24] 2229 	mov	r4,dpl
      00062E AD 83            [24] 2230 	mov	r5,dph
      000630 8C 06            [24] 2231 	mov	ar6,r4
      000632 8D 07            [24] 2232 	mov	ar7,r5
                                   2233 ;	../fsm.c:146: if(temp_cache > 0x0999)
      000634 C3               [12] 2234 	clr	c
      000635 74 99            [12] 2235 	mov	a,#0x99
      000637 9E               [12] 2236 	subb	a,r6
      000638 74 09            [12] 2237 	mov	a,#0x09
      00063A 9F               [12] 2238 	subb	a,r7
      00063B 50 04            [24] 2239 	jnc	00159$
                                   2240 ;	../fsm.c:147: temp_cache = 0x0999;
      00063D 7E 99            [12] 2241 	mov	r6,#0x99
      00063F 7F 09            [12] 2242 	mov	r7,#0x09
      000641                       2243 00159$:
                                   2244 ;	../fsm.c:148: display_puttemp(temp_cache);
      000641 8E 82            [24] 2245 	mov	dpl,r6
      000643 8F 83            [24] 2246 	mov	dph,r7
      000645 12r00r00         [24] 2247 	lcall	_display_puttemp
                                   2248 ;	/home/shenghao/workspace/TESTMCS51/display.h:146: display_buffer[1] &= 0x7f;
      000648 74 7F            [12] 2249 	mov	a,#0x7f
      00064A 55*01            [12] 2250 	anl	a,(_display_buffer + 0x0001)
      00064C F5*01            [12] 2251 	mov	(_display_buffer + 0x0001),a
                                   2252 ;	../fsm.c:150: break;
                                   2253 ;	../fsm.c:151: case fsm_home_dow:
      00064E 80 35            [24] 2254 	sjmp	00163$
      000650                       2255 00160$:
                                   2256 ;	../fsm.c:152: display_puts(ledstrings[ds1302.day-1]);
      000650 AE*05            [24] 2257 	mov	r6,(_ds1302 + 0x0005)
      000652 7F 00            [12] 2258 	mov	r7,#0x00
      000654 EE               [12] 2259 	mov	a,r6
      000655 24 FF            [12] 2260 	add	a,#0xff
      000657 F5*00            [12] 2261 	mov	__mulint_PARM_2,a
      000659 EF               [12] 2262 	mov	a,r7
      00065A 34 FF            [12] 2263 	addc	a,#0xff
      00065C F5*01            [12] 2264 	mov	(__mulint_PARM_2 + 1),a
      00065E 90 00 05         [24] 2265 	mov	dptr,#0x0005
      000661 12r00r00         [24] 2266 	lcall	__mulint
      000664 AE 82            [24] 2267 	mov	r6,dpl
      000666 AF 83            [24] 2268 	mov	r7,dph
      000668 EE               [12] 2269 	mov	a,r6
      000669 24r00            [12] 2270 	add	a,#_ledstrings
      00066B F5 82            [12] 2271 	mov	dpl,a
      00066D EF               [12] 2272 	mov	a,r7
      00066E 34s00            [12] 2273 	addc	a,#(_ledstrings >> 8)
      000670 F5 83            [12] 2274 	mov	dph,a
      000672 12r00r00         [24] 2275 	lcall	_display_puts
                                   2276 ;	../fsm.c:153: break;
                                   2277 ;	../fsm.c:154: case fsm_home_date:
      000675 80 0E            [24] 2278 	sjmp	00163$
      000677                       2279 00161$:
                                   2280 ;	../fsm.c:155: display_putdate();
      000677 12r00r00         [24] 2281 	lcall	_display_putdate
                                   2282 ;	../fsm.c:156: break;
                                   2283 ;	../fsm.c:157: case fsm_home_yyyy:
      00067A 80 09            [24] 2284 	sjmp	00163$
      00067C                       2285 00162$:
                                   2286 ;	../fsm.c:159: display_putbcd(0x20,ds1302.year);
      00067C 85*06*00         [24] 2287 	mov	_display_putbcd_PARM_2,(_ds1302 + 0x0006)
      00067F 75 82 20         [24] 2288 	mov	dpl,#0x20
      000682 12r00r00         [24] 2289 	lcall	_display_putbcd
                                   2290 ;	../fsm.c:161: }
      000685                       2291 00163$:
                                   2292 ;	../fsm.c:163: return fsm_repeat;	//Return repeat so we come back to this state.
      000685 75 82 01         [24] 2293 	mov	dpl,#0x01
      000688 22               [24] 2294 	ret
                                   2295 ;------------------------------------------------------------
                                   2296 ;Allocation info for local variables in function 'fsm_set_fn'
                                   2297 ;------------------------------------------------------------
                                   2298 ;fsm_set_temp              Allocated to registers r5 
                                   2299 ;menu_state                Allocated to registers r7 
                                   2300 ;select_state              Allocated to registers r6 
                                   2301 ;curstate                  Allocated with name '_fsm_set_fn_curstate_1_245'
                                   2302 ;------------------------------------------------------------
                                   2303 ;	../fsm.c:166: enum fsm_return fsm_set_fn() __reentrant {
                                   2304 ;	-----------------------------------------
                                   2305 ;	 function fsm_set_fn
                                   2306 ;	-----------------------------------------
      000689                       2307 _fsm_set_fn:
                                   2308 ;	../fsm.c:172: menu_state = button_read_and_clear_menu();
      000689 12r00r00         [24] 2309 	lcall	_button_read_and_clear_menu
      00068C AF 82            [24] 2310 	mov	r7,dpl
                                   2311 ;	../fsm.c:173: select_state = button_read_and_clear_select();
      00068E C0 07            [24] 2312 	push	ar7
      000690 12r00r00         [24] 2313 	lcall	_button_read_and_clear_select
      000693 AE 82            [24] 2314 	mov	r6,dpl
      000695 D0 07            [24] 2315 	pop	ar7
                                   2316 ;	../fsm.c:175: if(curstate != fsm_set_label){
      000697 E5*04            [12] 2317 	mov	a,_fsm_set_fn_curstate_1_245
      000699 60 20            [24] 2318 	jz	00108$
                                   2319 ;	../fsm.c:176: if(menu_state == BUTTON_LONG_PRESSED){
      00069B BF 01 10         [24] 2320 	cjne	r7,#0x01,00102$
                                   2321 ;	../fsm.c:178: display_flash = 0x00;
      00069E 75*00 00         [24] 2322 	mov	_display_flash,#0x00
                                   2323 ;	../fsm.c:179: ds1302_set_time();		  //Set new time
      0006A1 12r00r00         [24] 2324 	lcall	_ds1302_set_time
                                   2325 ;	../fsm.c:180: alarm_lastpoll = 0x60;	  //Reset last poll time, force compare
      0006A4 75*00 60         [24] 2326 	mov	_alarm_lastpoll,#0x60
                                   2327 ;	../fsm.c:181: curstate = fsm_set_label; //Set state back to default
      0006A7 75*04 00         [24] 2328 	mov	_fsm_set_fn_curstate_1_245,#0x00
                                   2329 ;	../fsm.c:182: return fsm_ok;
      0006AA 75 82 00         [24] 2330 	mov	dpl,#0x00
      0006AD 22               [24] 2331 	ret
      0006AE                       2332 00102$:
                                   2333 ;	../fsm.c:184: if(menu_state == BUTTON_PRESSED){
      0006AE EF               [12] 2334 	mov	a,r7
      0006AF 70 0A            [24] 2335 	jnz	00108$
                                   2336 ;	../fsm.c:186: if(++curstate == fsm_set_end)
      0006B1 05*04            [12] 2337 	inc	_fsm_set_fn_curstate_1_245
      0006B3 74 07            [12] 2338 	mov	a,#0x07
      0006B5 B5*04 03         [24] 2339 	cjne	a,_fsm_set_fn_curstate_1_245,00108$
                                   2340 ;	../fsm.c:187: curstate = fsm_set_start;
      0006B8 75*04 01         [24] 2341 	mov	_fsm_set_fn_curstate_1_245,#0x01
      0006BB                       2342 00108$:
                                   2343 ;	../fsm.c:191: fsm_set_temp = 0;
      0006BB 7D 00            [12] 2344 	mov	r5,#0x00
                                   2345 ;	../fsm.c:192: if((select_state == BUTTON_PRESSED) || (select_state == BUTTON_HELD_DOWN))
      0006BD EE               [12] 2346 	mov	a,r6
      0006BE 60 03            [24] 2347 	jz	00109$
      0006C0 BE 02 02         [24] 2348 	cjne	r6,#0x02,00110$
      0006C3                       2349 00109$:
                                   2350 ;	../fsm.c:193: fsm_set_temp = 1;
      0006C3 7D 01            [12] 2351 	mov	r5,#0x01
      0006C5                       2352 00110$:
                                   2353 ;	../fsm.c:196: switch(curstate) {
      0006C5 E5*04            [12] 2354 	mov	a,_fsm_set_fn_curstate_1_245
      0006C7 24 F9            [12] 2355 	add	a,#0xff - 0x06
      0006C9 50 03            [24] 2356 	jnc	00222$
      0006CB 02r08r13         [24] 2357 	ljmp	00149$
      0006CE                       2358 00222$:
      0006CE E5*04            [12] 2359 	mov	a,_fsm_set_fn_curstate_1_245
      0006D0 75 F0 03         [24] 2360 	mov	b,#0x03
      0006D3 A4               [48] 2361 	mul	ab
      0006D4 90r06rD8         [24] 2362 	mov	dptr,#00223$
      0006D7 73               [24] 2363 	jmp	@a+dptr
      0006D8                       2364 00223$:
      0006D8 02r06rED         [24] 2365 	ljmp	00112$
      0006DB 02r07r02         [24] 2366 	ljmp	00118$
      0006DE 02r07r02         [24] 2367 	ljmp	00118$
      0006E1 02r07r56         [24] 2368 	ljmp	00128$
      0006E4 02r07r56         [24] 2369 	ljmp	00128$
      0006E7 02r07rB5         [24] 2370 	ljmp	00143$
      0006EA 02r07rD7         [24] 2371 	ljmp	00146$
                                   2372 ;	../fsm.c:197: case fsm_set_label:
      0006ED                       2373 00112$:
                                   2374 ;	../fsm.c:198: if(select_state == BUTTON_PRESSED)
      0006ED EE               [12] 2375 	mov	a,r6
      0006EE 70 02            [24] 2376 	jnz	00114$
                                   2377 ;	../fsm.c:199: curstate++;
      0006F0 05*04            [12] 2378 	inc	_fsm_set_fn_curstate_1_245
      0006F2                       2379 00114$:
                                   2380 ;	../fsm.c:200: if(menu_state == BUTTON_PRESSED)
      0006F2 EF               [12] 2381 	mov	a,r7
      0006F3 70 04            [24] 2382 	jnz	00116$
                                   2383 ;	../fsm.c:201: return fsm_fail;
      0006F5 75 82 02         [24] 2384 	mov	dpl,#0x02
      0006F8 22               [24] 2385 	ret
      0006F9                       2386 00116$:
                                   2387 ;	../fsm.c:202: display_puts(ledstrings[ledstrings_setc]);
      0006F9 90r00r23         [24] 2388 	mov	dptr,#(_ledstrings + 0x0023)
      0006FC 12r00r00         [24] 2389 	lcall	_display_puts
                                   2390 ;	../fsm.c:203: break;
      0006FF 02r08r13         [24] 2391 	ljmp	00149$
                                   2392 ;	../fsm.c:205: case fsm_set_mm:
      000702                       2393 00118$:
                                   2394 ;	../fsm.c:206: if(curstate == fsm_set_hh){
      000702 74 01            [12] 2395 	mov	a,#0x01
      000704 B5*04 1B         [24] 2396 	cjne	a,_fsm_set_fn_curstate_1_245,00122$
                                   2397 ;	../fsm.c:207: ds1302.hour = bcd_add(ds1302.hour,fsm_set_temp);
      000707 8D*00            [24] 2398 	mov	_bcd_add_PARM_2,r5
      000709 85*02 82         [24] 2399 	mov	dpl,(_ds1302 + 0x0002)
      00070C C0 05            [24] 2400 	push	ar5
      00070E 12r00r00         [24] 2401 	lcall	_bcd_add
      000711 AF 82            [24] 2402 	mov	r7,dpl
      000713 D0 05            [24] 2403 	pop	ar5
                                   2404 ;	../fsm.c:208: if(ds1302.hour > 0x23)
      000715 EF               [12] 2405 	mov	a,r7
      000716 F5*02            [12] 2406 	mov	(_ds1302 + 0x0002),a
      000718 24 DC            [12] 2407 	add	a,#0xff - 0x23
      00071A 50 03            [24] 2408 	jnc	00120$
                                   2409 ;	../fsm.c:209: ds1302.hour = 0x00;
      00071C 75*02 00         [24] 2410 	mov	(_ds1302 + 0x0002),#0x00
      00071F                       2411 00120$:
                                   2412 ;	../fsm.c:210: display_flash = 0x03;
      00071F 75*00 03         [24] 2413 	mov	_display_flash,#0x03
      000722                       2414 00122$:
                                   2415 ;	../fsm.c:212: if(curstate == fsm_set_mm){
      000722 74 02            [12] 2416 	mov	a,#0x02
      000724 B5*04 17         [24] 2417 	cjne	a,_fsm_set_fn_curstate_1_245,00126$
                                   2418 ;	../fsm.c:213: ds1302.minutes = bcd_add(ds1302.minutes,fsm_set_temp);
      000727 8D*00            [24] 2419 	mov	_bcd_add_PARM_2,r5
      000729 85*01 82         [24] 2420 	mov	dpl,(_ds1302 + 0x0001)
      00072C 12r00r00         [24] 2421 	lcall	_bcd_add
                                   2422 ;	../fsm.c:214: if(ds1302.minutes > 0x59)
      00072F E5 82            [12] 2423 	mov	a,dpl
      000731 FF               [12] 2424 	mov	r7,a
      000732 F5*01            [12] 2425 	mov	(_ds1302 + 0x0001),a
      000734 24 A6            [12] 2426 	add	a,#0xff - 0x59
      000736 50 03            [24] 2427 	jnc	00124$
                                   2428 ;	../fsm.c:215: ds1302.minutes = 0;
      000738 75*01 00         [24] 2429 	mov	(_ds1302 + 0x0001),#0x00
      00073B                       2430 00124$:
                                   2431 ;	../fsm.c:216: display_flash = 0x0c;
      00073B 75*00 0C         [24] 2432 	mov	_display_flash,#0x0c
      00073E                       2433 00126$:
                                   2434 ;	../fsm.c:218: display_puttime(ds1302.hour,ds1302.minutes);
      00073E 85*02 82         [24] 2435 	mov	dpl,(_ds1302 + 0x0002)
      000741 85*01*00         [24] 2436 	mov	_display_puttime_PARM_2,(_ds1302 + 0x0001)
      000744 12r00r00         [24] 2437 	lcall	_display_puttime
                                   2438 ;	/home/shenghao/workspace/TESTMCS51/display.h:116: display_buffer[1] &= 0x7f;
      000747 74 7F            [12] 2439 	mov	a,#0x7f
      000749 55*01            [12] 2440 	anl	a,(_display_buffer + 0x0001)
      00074B F5*01            [12] 2441 	mov	(_display_buffer + 0x0001),a
                                   2442 ;	/home/shenghao/workspace/TESTMCS51/display.h:117: display_buffer[2] &= 0x7f;
      00074D 74 7F            [12] 2443 	mov	a,#0x7f
      00074F 55*02            [12] 2444 	anl	a,(_display_buffer + 0x0002)
      000751 F5*02            [12] 2445 	mov	(_display_buffer + 0x0002),a
                                   2446 ;	../fsm.c:220: break;
      000753 02r08r13         [24] 2447 	ljmp	00149$
                                   2448 ;	../fsm.c:222: case fsm_set_month:
      000756                       2449 00128$:
                                   2450 ;	../fsm.c:223: if(curstate == fsm_set_dd){
      000756 74 03            [12] 2451 	mov	a,#0x03
      000758 B5*04 2A         [24] 2452 	cjne	a,_fsm_set_fn_curstate_1_245,00135$
                                   2453 ;	../fsm.c:224: ds1302.date = bcd_add(ds1302.date,fsm_set_temp);
      00075B 8D*00            [24] 2454 	mov	_bcd_add_PARM_2,r5
      00075D 85*03 82         [24] 2455 	mov	dpl,(_ds1302 + 0x0003)
      000760 C0 05            [24] 2456 	push	ar5
      000762 12r00r00         [24] 2457 	lcall	_bcd_add
      000765 AF 82            [24] 2458 	mov	r7,dpl
      000767 D0 05            [24] 2459 	pop	ar5
                                   2460 ;	../fsm.c:225: if(ds1302.date > 0x31)
      000769 EF               [12] 2461 	mov	a,r7
      00076A F5*03            [12] 2462 	mov	(_ds1302 + 0x0003),a
      00076C 24 CE            [12] 2463 	add	a,#0xff - 0x31
      00076E 50 03            [24] 2464 	jnc	00130$
                                   2465 ;	../fsm.c:227: ds1302.date = 0x00;
      000770 75*03 00         [24] 2466 	mov	(_ds1302 + 0x0003),#0x00
      000773                       2467 00130$:
                                   2468 ;	../fsm.c:228: if(DATE_DISPLAY_MMDD)
      000773 90r00r03         [24] 2469 	mov	dptr,#(_ds1302_sram_data + 0x0003)
      000776 E0               [24] 2470 	movx	a,@dptr
      000777 23               [12] 2471 	rl	a
      000778 54 01            [12] 2472 	anl	a,#0x01
      00077A FF               [12] 2473 	mov	r7,a
      00077B 60 05            [24] 2474 	jz	00132$
                                   2475 ;	../fsm.c:229: display_flash = 0x0c;
      00077D 75*00 0C         [24] 2476 	mov	_display_flash,#0x0c
      000780 80 03            [24] 2477 	sjmp	00135$
      000782                       2478 00132$:
                                   2479 ;	../fsm.c:231: display_flash = 0x03;
      000782 75*00 03         [24] 2480 	mov	_display_flash,#0x03
      000785                       2481 00135$:
                                   2482 ;	../fsm.c:233: if(curstate == fsm_set_month){
      000785 74 04            [12] 2483 	mov	a,#0x04
      000787 B5*04 26         [24] 2484 	cjne	a,_fsm_set_fn_curstate_1_245,00142$
                                   2485 ;	../fsm.c:234: ds1302.month = bcd_add(ds1302.month,fsm_set_temp);
      00078A 8D*00            [24] 2486 	mov	_bcd_add_PARM_2,r5
      00078C 85*04 82         [24] 2487 	mov	dpl,(_ds1302 + 0x0004)
      00078F 12r00r00         [24] 2488 	lcall	_bcd_add
                                   2489 ;	../fsm.c:235: if(ds1302.month > 0x12)
      000792 E5 82            [12] 2490 	mov	a,dpl
      000794 FF               [12] 2491 	mov	r7,a
      000795 F5*04            [12] 2492 	mov	(_ds1302 + 0x0004),a
      000797 24 ED            [12] 2493 	add	a,#0xff - 0x12
      000799 50 03            [24] 2494 	jnc	00137$
                                   2495 ;	../fsm.c:236: ds1302.month = 0x00;
      00079B 75*04 00         [24] 2496 	mov	(_ds1302 + 0x0004),#0x00
      00079E                       2497 00137$:
                                   2498 ;	../fsm.c:237: if(DATE_DISPLAY_MMDD)
      00079E 90r00r03         [24] 2499 	mov	dptr,#(_ds1302_sram_data + 0x0003)
      0007A1 E0               [24] 2500 	movx	a,@dptr
      0007A2 23               [12] 2501 	rl	a
      0007A3 54 01            [12] 2502 	anl	a,#0x01
      0007A5 FF               [12] 2503 	mov	r7,a
      0007A6 60 05            [24] 2504 	jz	00139$
                                   2505 ;	../fsm.c:238: display_flash = 0x03;
      0007A8 75*00 03         [24] 2506 	mov	_display_flash,#0x03
      0007AB 80 03            [24] 2507 	sjmp	00142$
      0007AD                       2508 00139$:
                                   2509 ;	../fsm.c:240: display_flash = 0x0c;
      0007AD 75*00 0C         [24] 2510 	mov	_display_flash,#0x0c
      0007B0                       2511 00142$:
                                   2512 ;	../fsm.c:242: display_putdate();
      0007B0 12r00r00         [24] 2513 	lcall	_display_putdate
                                   2514 ;	../fsm.c:243: break;
                                   2515 ;	../fsm.c:244: case fsm_set_yyyy:
      0007B3 80 5E            [24] 2516 	sjmp	00149$
      0007B5                       2517 00143$:
                                   2518 ;	../fsm.c:245: ds1302.year = bcd_add(ds1302.year,fsm_set_temp);
      0007B5 8D*00            [24] 2519 	mov	_bcd_add_PARM_2,r5
      0007B7 85*06 82         [24] 2520 	mov	dpl,(_ds1302 + 0x0006)
      0007BA 12r00r00         [24] 2521 	lcall	_bcd_add
                                   2522 ;	../fsm.c:246: if(ds1302.year > 0x99)
      0007BD E5 82            [12] 2523 	mov	a,dpl
      0007BF FF               [12] 2524 	mov	r7,a
      0007C0 F5*06            [12] 2525 	mov	(_ds1302 + 0x0006),a
      0007C2 24 66            [12] 2526 	add	a,#0xff - 0x99
      0007C4 50 03            [24] 2527 	jnc	00145$
                                   2528 ;	../fsm.c:247: ds1302.year = 0x00;
      0007C6 75*06 00         [24] 2529 	mov	(_ds1302 + 0x0006),#0x00
      0007C9                       2530 00145$:
                                   2531 ;	../fsm.c:248: display_flash = 0x0f;
      0007C9 75*00 0F         [24] 2532 	mov	_display_flash,#0x0f
                                   2533 ;	../fsm.c:249: display_putbcd(0x20,ds1302.year);
      0007CC 85*06*00         [24] 2534 	mov	_display_putbcd_PARM_2,(_ds1302 + 0x0006)
      0007CF 75 82 20         [24] 2535 	mov	dpl,#0x20
      0007D2 12r00r00         [24] 2536 	lcall	_display_putbcd
                                   2537 ;	../fsm.c:250: break;
                                   2538 ;	../fsm.c:251: case fsm_set_dow:
      0007D5 80 3C            [24] 2539 	sjmp	00149$
      0007D7                       2540 00146$:
                                   2541 ;	../fsm.c:252: ds1302.day = bcd_add(ds1302.day,fsm_set_temp);
      0007D7 8D*00            [24] 2542 	mov	_bcd_add_PARM_2,r5
      0007D9 85*05 82         [24] 2543 	mov	dpl,(_ds1302 + 0x0005)
      0007DC 12r00r00         [24] 2544 	lcall	_bcd_add
                                   2545 ;	../fsm.c:253: if(ds1302.day > 0x07)
      0007DF E5 82            [12] 2546 	mov	a,dpl
      0007E1 FF               [12] 2547 	mov	r7,a
      0007E2 F5*05            [12] 2548 	mov	(_ds1302 + 0x0005),a
      0007E4 24 F8            [12] 2549 	add	a,#0xff - 0x07
      0007E6 50 03            [24] 2550 	jnc	00148$
                                   2551 ;	../fsm.c:254: ds1302.day = 0x01; //DOW register only from 0x01 - 0x07
      0007E8 75*05 01         [24] 2552 	mov	(_ds1302 + 0x0005),#0x01
      0007EB                       2553 00148$:
                                   2554 ;	../fsm.c:255: display_flash = 0x0f;
      0007EB 75*00 0F         [24] 2555 	mov	_display_flash,#0x0f
                                   2556 ;	../fsm.c:256: display_puts(ledstrings[ds1302.day-1]);
      0007EE AE*05            [24] 2557 	mov	r6,(_ds1302 + 0x0005)
      0007F0 7F 00            [12] 2558 	mov	r7,#0x00
      0007F2 EE               [12] 2559 	mov	a,r6
      0007F3 24 FF            [12] 2560 	add	a,#0xff
      0007F5 F5*00            [12] 2561 	mov	__mulint_PARM_2,a
      0007F7 EF               [12] 2562 	mov	a,r7
      0007F8 34 FF            [12] 2563 	addc	a,#0xff
      0007FA F5*01            [12] 2564 	mov	(__mulint_PARM_2 + 1),a
      0007FC 90 00 05         [24] 2565 	mov	dptr,#0x0005
      0007FF 12r00r00         [24] 2566 	lcall	__mulint
      000802 AE 82            [24] 2567 	mov	r6,dpl
      000804 AF 83            [24] 2568 	mov	r7,dph
      000806 EE               [12] 2569 	mov	a,r6
      000807 24r00            [12] 2570 	add	a,#_ledstrings
      000809 F5 82            [12] 2571 	mov	dpl,a
      00080B EF               [12] 2572 	mov	a,r7
      00080C 34s00            [12] 2573 	addc	a,#(_ledstrings >> 8)
      00080E F5 83            [12] 2574 	mov	dph,a
      000810 12r00r00         [24] 2575 	lcall	_display_puts
                                   2576 ;	../fsm.c:258: }
      000813                       2577 00149$:
                                   2578 ;	../fsm.c:260: return fsm_repeat;
      000813 75 82 01         [24] 2579 	mov	dpl,#0x01
      000816 22               [24] 2580 	ret
                                   2581 ;------------------------------------------------------------
                                   2582 ;Allocation info for local variables in function 'fsm_alarm_fn'
                                   2583 ;------------------------------------------------------------
                                   2584 ;alarm_temp                Allocated to registers r5 
                                   2585 ;menu_state                Allocated to registers r7 
                                   2586 ;select_state              Allocated to registers r6 
                                   2587 ;__00020053                Allocated to registers 
                                   2588 ;__00030058                Allocated to registers 
                                   2589 ;__00040059                Allocated to registers r4 
                                   2590 ;__00040060                Allocated to registers r6 
                                   2591 ;index                     Allocated to registers 
                                   2592 ;dow                       Allocated to registers 
                                   2593 ;__00040064                Allocated to registers r5 
                                   2594 ;__00040065                Allocated to registers r6 
                                   2595 ;index                     Allocated to registers 
                                   2596 ;dow                       Allocated to registers 
                                   2597 ;curstate                  Allocated with name '_fsm_alarm_fn_curstate_1_257'
                                   2598 ;sub_curstate              Allocated with name '_fsm_alarm_fn_sub_curstate_1_257'
                                   2599 ;------------------------------------------------------------
                                   2600 ;	../fsm.c:262: enum fsm_return fsm_alarm_fn() __reentrant {
                                   2601 ;	-----------------------------------------
                                   2602 ;	 function fsm_alarm_fn
                                   2603 ;	-----------------------------------------
      000817                       2604 _fsm_alarm_fn:
                                   2605 ;	../fsm.c:270: menu_state = button_read_and_clear_menu();
      000817 12r00r00         [24] 2606 	lcall	_button_read_and_clear_menu
      00081A AF 82            [24] 2607 	mov	r7,dpl
                                   2608 ;	../fsm.c:271: select_state = button_read_and_clear_select();
      00081C C0 07            [24] 2609 	push	ar7
      00081E 12r00r00         [24] 2610 	lcall	_button_read_and_clear_select
      000821 AE 82            [24] 2611 	mov	r6,dpl
      000823 D0 07            [24] 2612 	pop	ar7
                                   2613 ;	../fsm.c:273: alarm_temp = 0;
      000825 7D 00            [12] 2614 	mov	r5,#0x00
                                   2615 ;	../fsm.c:274: if(select_state == BUTTON_PRESSED || select_state == BUTTON_HELD_DOWN)
      000827 EE               [12] 2616 	mov	a,r6
      000828 60 03            [24] 2617 	jz	00101$
      00082A BE 02 02         [24] 2618 	cjne	r6,#0x02,00102$
      00082D                       2619 00101$:
                                   2620 ;	../fsm.c:275: alarm_temp = 1;
      00082D 7D 01            [12] 2621 	mov	r5,#0x01
      00082F                       2622 00102$:
                                   2623 ;	../fsm.c:277: switch(curstate) {
      00082F E4               [12] 2624 	clr	a
      000830 B5*05 02         [24] 2625 	cjne	a,_fsm_alarm_fn_curstate_1_257,00257$
      000833 80 07            [24] 2626 	sjmp	00104$
      000835                       2627 00257$:
      000835 74 01            [12] 2628 	mov	a,#0x01
                                   2629 ;	../fsm.c:278: case fsm_alarm_label:
      000837 B5*05 6E         [24] 2630 	cjne	a,_fsm_alarm_fn_curstate_1_257,00119$
      00083A 80 19            [24] 2631 	sjmp	00109$
      00083C                       2632 00104$:
                                   2633 ;	../fsm.c:279: if(menu_state == BUTTON_PRESSED)
      00083C EF               [12] 2634 	mov	a,r7
      00083D 70 04            [24] 2635 	jnz	00106$
                                   2636 ;	../fsm.c:281: return fsm_fail;
      00083F 75 82 02         [24] 2637 	mov	dpl,#0x02
      000842 22               [24] 2638 	ret
      000843                       2639 00106$:
                                   2640 ;	../fsm.c:282: if(select_state == BUTTON_PRESSED){
      000843 EE               [12] 2641 	mov	a,r6
      000844 70 06            [24] 2642 	jnz	00108$
                                   2643 ;	../fsm.c:284: curstate++;
      000846 05*05            [12] 2644 	inc	_fsm_alarm_fn_curstate_1_257
                                   2645 ;	../fsm.c:285: return fsm_repeat;
      000848 75 82 01         [24] 2646 	mov	dpl,#0x01
      00084B 22               [24] 2647 	ret
      00084C                       2648 00108$:
                                   2649 ;	../fsm.c:287: display_puts(ledstrings[ledstrings_seta]);
      00084C 90r00r28         [24] 2650 	mov	dptr,#(_ledstrings + 0x0028)
      00084F 12r00r00         [24] 2651 	lcall	_display_puts
                                   2652 ;	../fsm.c:288: break;
      000852 02r0Br73         [24] 2653 	ljmp	00164$
                                   2654 ;	../fsm.c:289: case fsm_alarm_global_toggle:
      000855                       2655 00109$:
                                   2656 ;	../fsm.c:290: if(menu_state == BUTTON_LONG_PRESSED){
      000855 BF 01 10         [24] 2657 	cjne	r7,#0x01,00111$
                                   2658 ;	../fsm.c:291: curstate = fsm_alarm_label;
      000858 75*05 00         [24] 2659 	mov	_fsm_alarm_fn_curstate_1_257,#0x00
                                   2660 ;	../fsm.c:292: ds1302_calculate_CRC();
      00085B 12r00r00         [24] 2661 	lcall	_ds1302_calculate_CRC
                                   2662 ;	../fsm.c:293: ds1302_write_SRAM();	  //Save data
      00085E 12r00r00         [24] 2663 	lcall	_ds1302_write_SRAM
                                   2664 ;	../fsm.c:294: alarm_lastpoll = 0x60;	  //Reset last poll time, force compare
      000861 75*00 60         [24] 2665 	mov	_alarm_lastpoll,#0x60
                                   2666 ;	../fsm.c:295: return fsm_ok;
      000864 75 82 00         [24] 2667 	mov	dpl,#0x00
      000867 22               [24] 2668 	ret
      000868                       2669 00111$:
                                   2670 ;	../fsm.c:297: if(select_state == BUTTON_PRESSED)
      000868 EE               [12] 2671 	mov	a,r6
      000869 70 08            [24] 2672 	jnz	00113$
                                   2673 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:94: ds1302_sram_data[3] ^= 0x01;
      00086B 90r00r03         [24] 2674 	mov	dptr,#(_ds1302_sram_data + 0x0003)
      00086E E0               [24] 2675 	movx	a,@dptr
      00086F 64 01            [12] 2676 	xrl	a,#0x01
      000871 FC               [12] 2677 	mov	r4,a
      000872 F0               [24] 2678 	movx	@dptr,a
                                   2679 ;	../fsm.c:298: alarm_global_toggle();
      000873                       2680 00113$:
                                   2681 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:84: return (ds1302_sram_data[3] & 0x01);
      000873 90r00r03         [24] 2682 	mov	dptr,#(_ds1302_sram_data + 0x0003)
      000876 E0               [24] 2683 	movx	a,@dptr
      000877 FC               [12] 2684 	mov	r4,a
      000878 30 E0 0C         [24] 2685 	jnb	acc.0,00115$
                                   2686 ;	../fsm.c:299: if(alarm_global_state())
                                   2687 ;	../fsm.c:300: display_puts(ledstrings[ledstrings_alon]);
      00087B 90r00r2D         [24] 2688 	mov	dptr,#(_ledstrings + 0x002d)
      00087E C0 07            [24] 2689 	push	ar7
      000880 12r00r00         [24] 2690 	lcall	_display_puts
      000883 D0 07            [24] 2691 	pop	ar7
      000885 80 0A            [24] 2692 	sjmp	00116$
      000887                       2693 00115$:
                                   2694 ;	../fsm.c:302: display_puts(ledstrings[ledstrings_alof]);
      000887 90r00r32         [24] 2695 	mov	dptr,#(_ledstrings + 0x0032)
      00088A C0 07            [24] 2696 	push	ar7
      00088C 12r00r00         [24] 2697 	lcall	_display_puts
      00088F D0 07            [24] 2698 	pop	ar7
      000891                       2699 00116$:
                                   2700 ;	/home/shenghao/workspace/TESTMCS51/display.h:116: display_buffer[1] &= 0x7f;
      000891 74 7F            [12] 2701 	mov	a,#0x7f
      000893 55*01            [12] 2702 	anl	a,(_display_buffer + 0x0001)
      000895 F5*01            [12] 2703 	mov	(_display_buffer + 0x0001),a
                                   2704 ;	/home/shenghao/workspace/TESTMCS51/display.h:117: display_buffer[2] &= 0x7f;
      000897 74 7F            [12] 2705 	mov	a,#0x7f
      000899 55*02            [12] 2706 	anl	a,(_display_buffer + 0x0002)
      00089B F5*02            [12] 2707 	mov	(_display_buffer + 0x0002),a
                                   2708 ;	../fsm.c:305: if(menu_state == BUTTON_PRESSED){
      00089D EF               [12] 2709 	mov	a,r7
      00089E 60 03            [24] 2710 	jz	00265$
      0008A0 02r0Br73         [24] 2711 	ljmp	00164$
      0008A3                       2712 00265$:
                                   2713 ;	../fsm.c:306: ++curstate;
      0008A3 05*05            [12] 2714 	inc	_fsm_alarm_fn_curstate_1_257
                                   2715 ;	../fsm.c:308: break;
      0008A5 02r0Br73         [24] 2716 	ljmp	00164$
                                   2717 ;	../fsm.c:309: default:
      0008A8                       2718 00119$:
                                   2719 ;	../fsm.c:310: switch(sub_curstate){
      0008A8 E5*06            [12] 2720 	mov	a,_fsm_alarm_fn_sub_curstate_1_257
      0008AA 24 F6            [12] 2721 	add	a,#0xff - 0x09
      0008AC 50 03            [24] 2722 	jnc	00266$
      0008AE 02r0Br73         [24] 2723 	ljmp	00164$
      0008B1                       2724 00266$:
      0008B1 E5*06            [12] 2725 	mov	a,_fsm_alarm_fn_sub_curstate_1_257
      0008B3 24 0B            [12] 2726 	add	a,#(00267$-3-.)
      0008B5 83               [24] 2727 	movc	a,@a+pc
      0008B6 F5 82            [12] 2728 	mov	dpl,a
      0008B8 E5*06            [12] 2729 	mov	a,_fsm_alarm_fn_sub_curstate_1_257
      0008BA 24 0E            [12] 2730 	add	a,#(00268$-3-.)
      0008BC 83               [24] 2731 	movc	a,@a+pc
      0008BD F5 83            [12] 2732 	mov	dph,a
      0008BF E4               [12] 2733 	clr	a
      0008C0 73               [24] 2734 	jmp	@a+dptr
      0008C1                       2735 00267$:
      0008C1rD5                    2736 	.db	00120$
      0008C2r7A                    2737 	.db	00132$
      0008C3r7A                    2738 	.db	00132$
      0008C4rAF                    2739 	.db	00151$
      0008C5rAF                    2740 	.db	00151$
      0008C6rAF                    2741 	.db	00151$
      0008C7rAF                    2742 	.db	00151$
      0008C8rAF                    2743 	.db	00151$
      0008C9rAF                    2744 	.db	00151$
      0008CArAF                    2745 	.db	00151$
      0008CB                       2746 00268$:
      0008CBs08                    2747 	.db	00120$>>8
      0008CCs09                    2748 	.db	00132$>>8
      0008CDs09                    2749 	.db	00132$>>8
      0008CEs0A                    2750 	.db	00151$>>8
      0008CFs0A                    2751 	.db	00151$>>8
      0008D0s0A                    2752 	.db	00151$>>8
      0008D1s0A                    2753 	.db	00151$>>8
      0008D2s0A                    2754 	.db	00151$>>8
      0008D3s0A                    2755 	.db	00151$>>8
      0008D4s0A                    2756 	.db	00151$>>8
                                   2757 ;	../fsm.c:311: case fsm_alarm_substate_toggle:
      0008D5                       2758 00120$:
                                   2759 ;	../fsm.c:312: if(menu_state == BUTTON_PRESSED){
      0008D5 EF               [12] 2760 	mov	a,r7
      0008D6 70 12            [24] 2761 	jnz	00124$
                                   2762 ;	../fsm.c:313: if(++curstate == (fsm_alarm_end + NUM_ALARMS))
      0008D8 05*05            [12] 2763 	inc	_fsm_alarm_fn_curstate_1_257
      0008DA 74 09            [12] 2764 	mov	a,#0x09
      0008DC B5*05 02         [24] 2765 	cjne	a,_fsm_alarm_fn_curstate_1_257,00270$
      0008DF 80 03            [24] 2766 	sjmp	00271$
      0008E1                       2767 00270$:
      0008E1 02r0Br73         [24] 2768 	ljmp	00164$
      0008E4                       2769 00271$:
                                   2770 ;	../fsm.c:314: curstate = fsm_alarm_start;
      0008E4 75*05 01         [24] 2771 	mov	_fsm_alarm_fn_curstate_1_257,#0x01
                                   2772 ;	../fsm.c:315: break;
      0008E7 02r0Br73         [24] 2773 	ljmp	00164$
      0008EA                       2774 00124$:
                                   2775 ;	../fsm.c:317: if(select_state == BUTTON_PRESSED){
      0008EA EE               [12] 2776 	mov	a,r6
      0008EB 70 36            [24] 2777 	jnz	00126$
                                   2778 ;	../fsm.c:318: alarms[(curstate - fsm_alarm_end)].dow_and_enable ^= 1;
      0008ED C0 06            [24] 2779 	push	ar6
      0008EF E5*05            [12] 2780 	mov	a,_fsm_alarm_fn_curstate_1_257
      0008F1 24 FE            [12] 2781 	add	a,#0xfe
      0008F3 75 F0 03         [24] 2782 	mov	b,#0x03
      0008F6 A4               [48] 2783 	mul	ab
      0008F7 FB               [12] 2784 	mov	r3,a
      0008F8 AC F0            [24] 2785 	mov	r4,b
      0008FA 24 04            [12] 2786 	add	a,#_alarms
      0008FC FA               [12] 2787 	mov	r2,a
      0008FD EC               [12] 2788 	mov	a,r4
      0008FE 34 00            [12] 2789 	addc	a,#(_alarms >> 8)
      000900 FE               [12] 2790 	mov	r6,a
      000901 74 02            [12] 2791 	mov	a,#0x02
      000903 2A               [12] 2792 	add	a,r2
      000904 FA               [12] 2793 	mov	r2,a
      000905 E4               [12] 2794 	clr	a
      000906 3E               [12] 2795 	addc	a,r6
      000907 FE               [12] 2796 	mov	r6,a
      000908 EB               [12] 2797 	mov	a,r3
      000909 24 04            [12] 2798 	add	a,#_alarms
      00090B FB               [12] 2799 	mov	r3,a
      00090C EC               [12] 2800 	mov	a,r4
      00090D 34 00            [12] 2801 	addc	a,#(_alarms >> 8)
      00090F FC               [12] 2802 	mov	r4,a
      000910 8B 82            [24] 2803 	mov	dpl,r3
      000912 8C 83            [24] 2804 	mov	dph,r4
      000914 A3               [24] 2805 	inc	dptr
      000915 A3               [24] 2806 	inc	dptr
      000916 E0               [24] 2807 	movx	a,@dptr
      000917 FC               [12] 2808 	mov	r4,a
      000918 63 04 01         [24] 2809 	xrl	ar4,#0x01
      00091B 8A 82            [24] 2810 	mov	dpl,r2
      00091D 8E 83            [24] 2811 	mov	dph,r6
      00091F EC               [12] 2812 	mov	a,r4
      000920 F0               [24] 2813 	movx	@dptr,a
                                   2814 ;	../fsm.c:392: return fsm_repeat;
      000921 D0 06            [24] 2815 	pop	ar6
                                   2816 ;	../fsm.c:318: alarms[(curstate - fsm_alarm_end)].dow_and_enable ^= 1;
      000923                       2817 00126$:
                                   2818 ;	../fsm.c:320: if(select_state == BUTTON_LONG_PRESSED){
      000923 BE 01 05         [24] 2819 	cjne	r6,#0x01,00128$
                                   2820 ;	../fsm.c:321: sub_curstate++;
      000926 05*06            [12] 2821 	inc	_fsm_alarm_fn_sub_curstate_1_257
                                   2822 ;	../fsm.c:322: break;
      000928 02r0Br73         [24] 2823 	ljmp	00164$
      00092B                       2824 00128$:
                                   2825 ;	../fsm.c:324: if(menu_state == BUTTON_LONG_PRESSED){
      00092B BF 01 0A         [24] 2826 	cjne	r7,#0x01,00130$
                                   2827 ;	../fsm.c:325: sub_curstate = fsm_alarm_substate_toggle;
      00092E 75*06 00         [24] 2828 	mov	_fsm_alarm_fn_sub_curstate_1_257,#0x00
                                   2829 ;	../fsm.c:326: curstate = fsm_alarm_label;
      000931 75*05 00         [24] 2830 	mov	_fsm_alarm_fn_curstate_1_257,#0x00
                                   2831 ;	../fsm.c:327: return fsm_ok;
      000934 75 82 00         [24] 2832 	mov	dpl,#0x00
      000937 22               [24] 2833 	ret
      000938                       2834 00130$:
                                   2835 ;	../fsm.c:329: display_buffer[0] = ledfonts_numeric_normal['A'];
      000938 90r00r41         [24] 2836 	mov	dptr,#(_ledfonts_numeric_normal + 0x0041)
      00093B E4               [12] 2837 	clr	a
      00093C 93               [24] 2838 	movc	a,@a+dptr
      00093D FE               [12] 2839 	mov	r6,a
      00093E 8E*00            [24] 2840 	mov	_display_buffer,r6
                                   2841 ;	../fsm.c:330: display_buffer[1] = ledfonts_numeric_normal[(curstate - fsm_alarm_end)];
      000940 E5*05            [12] 2842 	mov	a,_fsm_alarm_fn_curstate_1_257
      000942 24 FE            [12] 2843 	add	a,#0xfe
      000944 90r00r00         [24] 2844 	mov	dptr,#_ledfonts_numeric_normal
      000947 93               [24] 2845 	movc	a,@a+dptr
      000948 FE               [12] 2846 	mov	r6,a
      000949 8E*01            [24] 2847 	mov	(_display_buffer + 0x0001),r6
                                   2848 ;	../fsm.c:331: display_putbool(alarms[(curstate - fsm_alarm_end)].dow_and_enable & 0x01);
      00094B E5*05            [12] 2849 	mov	a,_fsm_alarm_fn_curstate_1_257
      00094D 24 FE            [12] 2850 	add	a,#0xfe
      00094F 75 F0 03         [24] 2851 	mov	b,#0x03
      000952 A4               [48] 2852 	mul	ab
      000953 24 04            [12] 2853 	add	a,#_alarms
      000955 FC               [12] 2854 	mov	r4,a
      000956 74 00            [12] 2855 	mov	a,#(_alarms >> 8)
      000958 35 F0            [12] 2856 	addc	a,b
      00095A FE               [12] 2857 	mov	r6,a
      00095B 8C 82            [24] 2858 	mov	dpl,r4
      00095D 8E 83            [24] 2859 	mov	dph,r6
      00095F A3               [24] 2860 	inc	dptr
      000960 A3               [24] 2861 	inc	dptr
      000961 E0               [24] 2862 	movx	a,@dptr
      000962 FE               [12] 2863 	mov	r6,a
      000963 74 01            [12] 2864 	mov	a,#0x01
      000965 5E               [12] 2865 	anl	a,r6
      000966 F5 82            [12] 2866 	mov	dpl,a
      000968 12r00r00         [24] 2867 	lcall	_display_putbool
                                   2868 ;	/home/shenghao/workspace/TESTMCS51/display.h:116: display_buffer[1] &= 0x7f;
      00096B 74 7F            [12] 2869 	mov	a,#0x7f
      00096D 55*01            [12] 2870 	anl	a,(_display_buffer + 0x0001)
      00096F F5*01            [12] 2871 	mov	(_display_buffer + 0x0001),a
                                   2872 ;	/home/shenghao/workspace/TESTMCS51/display.h:117: display_buffer[2] &= 0x7f;
      000971 74 7F            [12] 2873 	mov	a,#0x7f
      000973 55*02            [12] 2874 	anl	a,(_display_buffer + 0x0002)
      000975 F5*02            [12] 2875 	mov	(_display_buffer + 0x0002),a
                                   2876 ;	../fsm.c:333: break;
      000977 02r0Br73         [24] 2877 	ljmp	00164$
                                   2878 ;	../fsm.c:335: case fsm_alarm_substate_mm:
      00097A                       2879 00132$:
                                   2880 ;	../fsm.c:336: if(menu_state == BUTTON_PRESSED){
      00097A EF               [12] 2881 	mov	a,r7
      00097B 70 08            [24] 2882 	jnz	00134$
                                   2883 ;	../fsm.c:337: sub_curstate++;
      00097D 05*06            [12] 2884 	inc	_fsm_alarm_fn_sub_curstate_1_257
                                   2885 ;	../fsm.c:338: display_flash = 0x00;
      00097F 75*00 00         [24] 2886 	mov	_display_flash,#0x00
                                   2887 ;	../fsm.c:339: break;
      000982 02r0Br73         [24] 2888 	ljmp	00164$
      000985                       2889 00134$:
                                   2890 ;	../fsm.c:341: if(menu_state == BUTTON_LONG_PRESSED){
      000985 BF 01 09         [24] 2891 	cjne	r7,#0x01,00136$
                                   2892 ;	../fsm.c:342: sub_curstate = fsm_alarm_substate_toggle;
      000988 75*06 00         [24] 2893 	mov	_fsm_alarm_fn_sub_curstate_1_257,#0x00
                                   2894 ;	../fsm.c:343: display_flash = 0x00;
      00098B 75*00 00         [24] 2895 	mov	_display_flash,#0x00
                                   2896 ;	../fsm.c:344: break;
      00098E 02r0Br73         [24] 2897 	ljmp	00164$
      000991                       2898 00136$:
                                   2899 ;	../fsm.c:346: if(sub_curstate == fsm_alarm_substate_hh){
      000991 74 01            [12] 2900 	mov	a,#0x01
      000993 B5*06 68         [24] 2901 	cjne	a,_fsm_alarm_fn_sub_curstate_1_257,00140$
                                   2902 ;	../fsm.c:347: alarms[(curstate - fsm_alarm_end)].hour = bcd_add(alarms[(curstate - fsm_alarm_end)].hour,alarm_temp);
      000996 E5*05            [12] 2903 	mov	a,_fsm_alarm_fn_curstate_1_257
      000998 24 FE            [12] 2904 	add	a,#0xfe
      00099A 75 F0 03         [24] 2905 	mov	b,#0x03
      00099D A4               [48] 2906 	mul	ab
      00099E FC               [12] 2907 	mov	r4,a
      00099F AE F0            [24] 2908 	mov	r6,b
      0009A1 24 04            [12] 2909 	add	a,#_alarms
      0009A3 FA               [12] 2910 	mov	r2,a
      0009A4 EE               [12] 2911 	mov	a,r6
      0009A5 34 00            [12] 2912 	addc	a,#(_alarms >> 8)
      0009A7 FB               [12] 2913 	mov	r3,a
      0009A8 EC               [12] 2914 	mov	a,r4
      0009A9 24 04            [12] 2915 	add	a,#_alarms
      0009AB F5 82            [12] 2916 	mov	dpl,a
      0009AD EE               [12] 2917 	mov	a,r6
      0009AE 34 00            [12] 2918 	addc	a,#(_alarms >> 8)
      0009B0 F5 83            [12] 2919 	mov	dph,a
      0009B2 E0               [24] 2920 	movx	a,@dptr
      0009B3 FE               [12] 2921 	mov	r6,a
      0009B4 8D*00            [24] 2922 	mov	_bcd_add_PARM_2,r5
      0009B6 8E 82            [24] 2923 	mov	dpl,r6
      0009B8 C0 05            [24] 2924 	push	ar5
      0009BA C0 03            [24] 2925 	push	ar3
      0009BC C0 02            [24] 2926 	push	ar2
      0009BE 12r00r00         [24] 2927 	lcall	_bcd_add
      0009C1 AE 82            [24] 2928 	mov	r6,dpl
      0009C3 D0 02            [24] 2929 	pop	ar2
      0009C5 D0 03            [24] 2930 	pop	ar3
      0009C7 D0 05            [24] 2931 	pop	ar5
      0009C9 8A 82            [24] 2932 	mov	dpl,r2
      0009CB 8B 83            [24] 2933 	mov	dph,r3
      0009CD EE               [12] 2934 	mov	a,r6
      0009CE F0               [24] 2935 	movx	@dptr,a
                                   2936 ;	../fsm.c:348: if(alarms[(curstate - fsm_alarm_end)].hour > 0x23)
      0009CF E5*05            [12] 2937 	mov	a,_fsm_alarm_fn_curstate_1_257
      0009D1 24 FE            [12] 2938 	add	a,#0xfe
      0009D3 75 F0 03         [24] 2939 	mov	b,#0x03
      0009D6 A4               [48] 2940 	mul	ab
      0009D7 24 04            [12] 2941 	add	a,#_alarms
      0009D9 F5 82            [12] 2942 	mov	dpl,a
      0009DB 74 00            [12] 2943 	mov	a,#(_alarms >> 8)
      0009DD 35 F0            [12] 2944 	addc	a,b
      0009DF F5 83            [12] 2945 	mov	dph,a
      0009E1 E0               [24] 2946 	movx	a,@dptr
      0009E2 FE               [12] 2947 	mov  r6,a
      0009E3 24 DC            [12] 2948 	add	a,#0xff - 0x23
      0009E5 50 14            [24] 2949 	jnc	00138$
                                   2950 ;	../fsm.c:349: alarms[(curstate - fsm_alarm_end)].hour = 0x00;
      0009E7 E5*05            [12] 2951 	mov	a,_fsm_alarm_fn_curstate_1_257
      0009E9 24 FE            [12] 2952 	add	a,#0xfe
      0009EB 75 F0 03         [24] 2953 	mov	b,#0x03
      0009EE A4               [48] 2954 	mul	ab
      0009EF 24 04            [12] 2955 	add	a,#_alarms
      0009F1 F5 82            [12] 2956 	mov	dpl,a
      0009F3 74 00            [12] 2957 	mov	a,#(_alarms >> 8)
      0009F5 35 F0            [12] 2958 	addc	a,b
      0009F7 F5 83            [12] 2959 	mov	dph,a
      0009F9 E4               [12] 2960 	clr	a
      0009FA F0               [24] 2961 	movx	@dptr,a
      0009FB                       2962 00138$:
                                   2963 ;	../fsm.c:350: display_flash = 0x03;
      0009FB 75*00 03         [24] 2964 	mov	_display_flash,#0x03
      0009FE                       2965 00140$:
                                   2966 ;	../fsm.c:352: if(sub_curstate == fsm_alarm_substate_mm){
      0009FE 74 02            [12] 2967 	mov	a,#0x02
      000A00 B5*06 72         [24] 2968 	cjne	a,_fsm_alarm_fn_sub_curstate_1_257,00144$
                                   2969 ;	../fsm.c:353: alarms[(curstate - fsm_alarm_end)].minute = bcd_add(alarms[(curstate - fsm_alarm_end)].minute,alarm_temp);
      000A03 E5*05            [12] 2970 	mov	a,_fsm_alarm_fn_curstate_1_257
      000A05 24 FE            [12] 2971 	add	a,#0xfe
      000A07 75 F0 03         [24] 2972 	mov	b,#0x03
      000A0A A4               [48] 2973 	mul	ab
      000A0B FC               [12] 2974 	mov	r4,a
      000A0C AE F0            [24] 2975 	mov	r6,b
      000A0E 24 04            [12] 2976 	add	a,#_alarms
      000A10 FA               [12] 2977 	mov	r2,a
      000A11 EE               [12] 2978 	mov	a,r6
      000A12 34 00            [12] 2979 	addc	a,#(_alarms >> 8)
      000A14 FB               [12] 2980 	mov	r3,a
      000A15 0A               [12] 2981 	inc	r2
      000A16 BA 00 01         [24] 2982 	cjne	r2,#0x00,00285$
      000A19 0B               [12] 2983 	inc	r3
      000A1A                       2984 00285$:
      000A1A EC               [12] 2985 	mov	a,r4
      000A1B 24 04            [12] 2986 	add	a,#_alarms
      000A1D FC               [12] 2987 	mov	r4,a
      000A1E EE               [12] 2988 	mov	a,r6
      000A1F 34 00            [12] 2989 	addc	a,#(_alarms >> 8)
      000A21 FE               [12] 2990 	mov	r6,a
      000A22 8C 82            [24] 2991 	mov	dpl,r4
      000A24 8E 83            [24] 2992 	mov	dph,r6
      000A26 A3               [24] 2993 	inc	dptr
      000A27 E0               [24] 2994 	movx	a,@dptr
      000A28 FE               [12] 2995 	mov	r6,a
      000A29 8D*00            [24] 2996 	mov	_bcd_add_PARM_2,r5
      000A2B 8E 82            [24] 2997 	mov	dpl,r6
      000A2D C0 03            [24] 2998 	push	ar3
      000A2F C0 02            [24] 2999 	push	ar2
      000A31 12r00r00         [24] 3000 	lcall	_bcd_add
      000A34 AE 82            [24] 3001 	mov	r6,dpl
      000A36 D0 02            [24] 3002 	pop	ar2
      000A38 D0 03            [24] 3003 	pop	ar3
      000A3A 8A 82            [24] 3004 	mov	dpl,r2
      000A3C 8B 83            [24] 3005 	mov	dph,r3
      000A3E EE               [12] 3006 	mov	a,r6
      000A3F F0               [24] 3007 	movx	@dptr,a
                                   3008 ;	../fsm.c:354: if(alarms[(curstate - fsm_alarm_end)].minute > 0x59)
      000A40 E5*05            [12] 3009 	mov	a,_fsm_alarm_fn_curstate_1_257
      000A42 24 FE            [12] 3010 	add	a,#0xfe
      000A44 75 F0 03         [24] 3011 	mov	b,#0x03
      000A47 A4               [48] 3012 	mul	ab
      000A48 24 04            [12] 3013 	add	a,#_alarms
      000A4A FC               [12] 3014 	mov	r4,a
      000A4B 74 00            [12] 3015 	mov	a,#(_alarms >> 8)
      000A4D 35 F0            [12] 3016 	addc	a,b
      000A4F FE               [12] 3017 	mov	r6,a
      000A50 8C 82            [24] 3018 	mov	dpl,r4
      000A52 8E 83            [24] 3019 	mov	dph,r6
      000A54 A3               [24] 3020 	inc	dptr
      000A55 E0               [24] 3021 	movx	a,@dptr
      000A56 FE               [12] 3022 	mov  r6,a
      000A57 24 A6            [12] 3023 	add	a,#0xff - 0x59
      000A59 50 17            [24] 3024 	jnc	00142$
                                   3025 ;	../fsm.c:355: alarms[(curstate - fsm_alarm_end)].minute = 0x00;
      000A5B E5*05            [12] 3026 	mov	a,_fsm_alarm_fn_curstate_1_257
      000A5D 24 FE            [12] 3027 	add	a,#0xfe
      000A5F 75 F0 03         [24] 3028 	mov	b,#0x03
      000A62 A4               [48] 3029 	mul	ab
      000A63 24 04            [12] 3030 	add	a,#_alarms
      000A65 FC               [12] 3031 	mov	r4,a
      000A66 74 00            [12] 3032 	mov	a,#(_alarms >> 8)
      000A68 35 F0            [12] 3033 	addc	a,b
      000A6A FE               [12] 3034 	mov	r6,a
      000A6B 8C 82            [24] 3035 	mov	dpl,r4
      000A6D 8E 83            [24] 3036 	mov	dph,r6
      000A6F A3               [24] 3037 	inc	dptr
      000A70 E4               [12] 3038 	clr	a
      000A71 F0               [24] 3039 	movx	@dptr,a
      000A72                       3040 00142$:
                                   3041 ;	../fsm.c:356: display_flash = 0x0c;
      000A72 75*00 0C         [24] 3042 	mov	_display_flash,#0x0c
      000A75                       3043 00144$:
                                   3044 ;	../fsm.c:358: display_puttime(alarms[(curstate - fsm_alarm_end)].hour,alarms[(curstate - fsm_alarm_end)].minute);
      000A75 E5*05            [12] 3045 	mov	a,_fsm_alarm_fn_curstate_1_257
      000A77 24 FE            [12] 3046 	add	a,#0xfe
      000A79 75 F0 03         [24] 3047 	mov	b,#0x03
      000A7C A4               [48] 3048 	mul	ab
      000A7D FC               [12] 3049 	mov	r4,a
      000A7E AE F0            [24] 3050 	mov	r6,b
      000A80 24 04            [12] 3051 	add	a,#_alarms
      000A82 F5 82            [12] 3052 	mov	dpl,a
      000A84 EE               [12] 3053 	mov	a,r6
      000A85 34 00            [12] 3054 	addc	a,#(_alarms >> 8)
      000A87 F5 83            [12] 3055 	mov	dph,a
      000A89 E0               [24] 3056 	movx	a,@dptr
      000A8A FB               [12] 3057 	mov	r3,a
      000A8B EC               [12] 3058 	mov	a,r4
      000A8C 24 04            [12] 3059 	add	a,#_alarms
      000A8E FC               [12] 3060 	mov	r4,a
      000A8F EE               [12] 3061 	mov	a,r6
      000A90 34 00            [12] 3062 	addc	a,#(_alarms >> 8)
      000A92 FE               [12] 3063 	mov	r6,a
      000A93 8C 82            [24] 3064 	mov	dpl,r4
      000A95 8E 83            [24] 3065 	mov	dph,r6
      000A97 A3               [24] 3066 	inc	dptr
      000A98 E0               [24] 3067 	movx	a,@dptr
      000A99 F5*00            [12] 3068 	mov	_display_puttime_PARM_2,a
      000A9B 8B 82            [24] 3069 	mov	dpl,r3
      000A9D 12r00r00         [24] 3070 	lcall	_display_puttime
                                   3071 ;	/home/shenghao/workspace/TESTMCS51/display.h:116: display_buffer[1] &= 0x7f;
      000AA0 74 7F            [12] 3072 	mov	a,#0x7f
      000AA2 55*01            [12] 3073 	anl	a,(_display_buffer + 0x0001)
      000AA4 F5*01            [12] 3074 	mov	(_display_buffer + 0x0001),a
                                   3075 ;	/home/shenghao/workspace/TESTMCS51/display.h:117: display_buffer[2] &= 0x7f;
      000AA6 74 7F            [12] 3076 	mov	a,#0x7f
      000AA8 55*02            [12] 3077 	anl	a,(_display_buffer + 0x0002)
      000AAA F5*02            [12] 3078 	mov	(_display_buffer + 0x0002),a
                                   3079 ;	../fsm.c:360: break;
      000AAC 02r0Br73         [24] 3080 	ljmp	00164$
                                   3081 ;	../fsm.c:367: case fsm_alarm_substate_dow_sun:
      000AAF                       3082 00151$:
                                   3083 ;	../fsm.c:368: display_puts(ledstrings[sub_curstate - fsm_alarm_substate_mm -1]);
      000AAF AC*06            [24] 3084 	mov	r4,_fsm_alarm_fn_sub_curstate_1_257
      000AB1 7E 00            [12] 3085 	mov	r6,#0x00
      000AB3 EC               [12] 3086 	mov	a,r4
      000AB4 24 FD            [12] 3087 	add	a,#0xfd
      000AB6 F5*00            [12] 3088 	mov	__mulint_PARM_2,a
      000AB8 EE               [12] 3089 	mov	a,r6
      000AB9 34 FF            [12] 3090 	addc	a,#0xff
      000ABB F5*01            [12] 3091 	mov	(__mulint_PARM_2 + 1),a
      000ABD 90 00 05         [24] 3092 	mov	dptr,#0x0005
      000AC0 C0 07            [24] 3093 	push	ar7
      000AC2 C0 05            [24] 3094 	push	ar5
      000AC4 12r00r00         [24] 3095 	lcall	__mulint
      000AC7 AC 82            [24] 3096 	mov	r4,dpl
      000AC9 AE 83            [24] 3097 	mov	r6,dph
      000ACB EC               [12] 3098 	mov	a,r4
      000ACC 24r00            [12] 3099 	add	a,#_ledstrings
      000ACE F5 82            [12] 3100 	mov	dpl,a
      000AD0 EE               [12] 3101 	mov	a,r6
      000AD1 34s00            [12] 3102 	addc	a,#(_ledstrings >> 8)
      000AD3 F5 83            [12] 3103 	mov	dph,a
      000AD5 12r00r00         [24] 3104 	lcall	_display_puts
      000AD8 D0 05            [24] 3105 	pop	ar5
      000ADA D0 07            [24] 3106 	pop	ar7
                                   3107 ;	../fsm.c:369: if(alarm_dow_state(curstate - fsm_alarm_end,sub_curstate - fsm_alarm_substate_mm)){
      000ADC E5*06            [12] 3108 	mov	a,_fsm_alarm_fn_sub_curstate_1_257
      000ADE 24 FE            [12] 3109 	add	a,#0xfe
      000AE0 FE               [12] 3110 	mov	r6,a
      000AE1 E5*05            [12] 3111 	mov	a,_fsm_alarm_fn_curstate_1_257
      000AE3 24 FE            [12] 3112 	add	a,#0xfe
                                   3113 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:106: return ((alarms[index].dow_and_enable >> dow) & 0x01);
      000AE5 75 F0 03         [24] 3114 	mov	b,#0x03
      000AE8 A4               [48] 3115 	mul	ab
      000AE9 24 04            [12] 3116 	add	a,#_alarms
      000AEB FB               [12] 3117 	mov	r3,a
      000AEC 74 00            [12] 3118 	mov	a,#(_alarms >> 8)
      000AEE 35 F0            [12] 3119 	addc	a,b
      000AF0 FC               [12] 3120 	mov	r4,a
      000AF1 8B 82            [24] 3121 	mov	dpl,r3
      000AF3 8C 83            [24] 3122 	mov	dph,r4
      000AF5 A3               [24] 3123 	inc	dptr
      000AF6 A3               [24] 3124 	inc	dptr
      000AF7 E0               [24] 3125 	movx	a,@dptr
      000AF8 FC               [12] 3126 	mov	r4,a
      000AF9 8E F0            [24] 3127 	mov	b,r6
      000AFB 05 F0            [12] 3128 	inc	b
      000AFD EC               [12] 3129 	mov	a,r4
      000AFE 80 02            [24] 3130 	sjmp	00288$
      000B00                       3131 00287$:
      000B00 C3               [12] 3132 	clr	c
      000B01 13               [12] 3133 	rrc	a
      000B02                       3134 00288$:
      000B02 D5 F0 FB         [24] 3135 	djnz	b,00287$
      000B05 FE               [12] 3136 	mov	r6,a
      000B06 30 E0 08         [24] 3137 	jnb	acc.0,00153$
                                   3138 ;	../fsm.c:369: if(alarm_dow_state(curstate - fsm_alarm_end,sub_curstate - fsm_alarm_substate_mm)){
                                   3139 ;	/home/shenghao/workspace/TESTMCS51/display.h:175: display_buffer[3] &= 0x7f;
      000B09 74 7F            [12] 3140 	mov	a,#0x7f
      000B0B 55*03            [12] 3141 	anl	a,(_display_buffer + 0x0003)
      000B0D F5*03            [12] 3142 	mov	(_display_buffer + 0x0003),a
                                   3143 ;	../fsm.c:370: display_ampmon();
      000B0F 80 06            [24] 3144 	sjmp	00154$
      000B11                       3145 00153$:
                                   3146 ;	/home/shenghao/workspace/TESTMCS51/display.h:190: display_buffer[3] |= 0x80;
      000B11 74 80            [12] 3147 	mov	a,#0x80
      000B13 45*03            [12] 3148 	orl	a,(_display_buffer + 0x0003)
      000B15 F5*03            [12] 3149 	mov	(_display_buffer + 0x0003),a
                                   3150 ;	../fsm.c:372: display_ampmoff();
      000B17                       3151 00154$:
                                   3152 ;	../fsm.c:374: if(alarm_temp)
      000B17 ED               [12] 3153 	mov	a,r5
      000B18 60 44            [24] 3154 	jz	00156$
                                   3155 ;	../fsm.c:375: alarm_dow_toggle(curstate - fsm_alarm_end,sub_curstate - fsm_alarm_substate_mm);
      000B1A E5*06            [12] 3156 	mov	a,_fsm_alarm_fn_sub_curstate_1_257
      000B1C 24 FE            [12] 3157 	add	a,#0xfe
      000B1E FE               [12] 3158 	mov	r6,a
      000B1F E5*05            [12] 3159 	mov	a,_fsm_alarm_fn_curstate_1_257
      000B21 24 FE            [12] 3160 	add	a,#0xfe
                                   3161 ;	/home/shenghao/workspace/TESTMCS51/alarm.h:116: alarms[index].dow_and_enable ^= (0x01 << dow);
      000B23 75 F0 03         [24] 3162 	mov	b,#0x03
      000B26 A4               [48] 3163 	mul	ab
      000B27 FD               [12] 3164 	mov	r5,a
      000B28 AC F0            [24] 3165 	mov	r4,b
      000B2A 24 04            [12] 3166 	add	a,#_alarms
      000B2C FA               [12] 3167 	mov	r2,a
      000B2D EC               [12] 3168 	mov	a,r4
      000B2E 34 00            [12] 3169 	addc	a,#(_alarms >> 8)
      000B30 FB               [12] 3170 	mov	r3,a
      000B31 74 02            [12] 3171 	mov	a,#0x02
      000B33 2A               [12] 3172 	add	a,r2
      000B34 FA               [12] 3173 	mov	r2,a
      000B35 E4               [12] 3174 	clr	a
      000B36 3B               [12] 3175 	addc	a,r3
      000B37 FB               [12] 3176 	mov	r3,a
      000B38 ED               [12] 3177 	mov	a,r5
      000B39 24 04            [12] 3178 	add	a,#_alarms
      000B3B FD               [12] 3179 	mov	r5,a
      000B3C EC               [12] 3180 	mov	a,r4
      000B3D 34 00            [12] 3181 	addc	a,#(_alarms >> 8)
      000B3F FC               [12] 3182 	mov	r4,a
      000B40 8D 82            [24] 3183 	mov	dpl,r5
      000B42 8C 83            [24] 3184 	mov	dph,r4
      000B44 A3               [24] 3185 	inc	dptr
      000B45 A3               [24] 3186 	inc	dptr
      000B46 E0               [24] 3187 	movx	a,@dptr
      000B47 FD               [12] 3188 	mov	r5,a
      000B48 8E F0            [24] 3189 	mov	b,r6
      000B4A 05 F0            [12] 3190 	inc	b
      000B4C 74 01            [12] 3191 	mov	a,#0x01
      000B4E 80 02            [24] 3192 	sjmp	00293$
      000B50                       3193 00291$:
      000B50 25 E0            [12] 3194 	add	a,acc
      000B52                       3195 00293$:
      000B52 D5 F0 FB         [24] 3196 	djnz	b,00291$
      000B55 FE               [12] 3197 	mov	r6,a
      000B56 62 05            [12] 3198 	xrl	ar5,a
      000B58 8A 82            [24] 3199 	mov	dpl,r2
      000B5A 8B 83            [24] 3200 	mov	dph,r3
      000B5C ED               [12] 3201 	mov	a,r5
      000B5D F0               [24] 3202 	movx	@dptr,a
                                   3203 ;	../fsm.c:375: alarm_dow_toggle(curstate - fsm_alarm_end,sub_curstate - fsm_alarm_substate_mm);
      000B5E                       3204 00156$:
                                   3205 ;	../fsm.c:376: if(menu_state == BUTTON_PRESSED){
      000B5E EF               [12] 3206 	mov	a,r7
      000B5F 70 0C            [24] 3207 	jnz	00160$
                                   3208 ;	../fsm.c:377: if(++sub_curstate == fsm_alarm_substate_end){
      000B61 05*06            [12] 3209 	inc	_fsm_alarm_fn_sub_curstate_1_257
      000B63 74 0A            [12] 3210 	mov	a,#0x0a
      000B65 B5*06 0B         [24] 3211 	cjne	a,_fsm_alarm_fn_sub_curstate_1_257,00164$
                                   3212 ;	../fsm.c:378: sub_curstate = fsm_alarm_substate_start;
      000B68 75*06 01         [24] 3213 	mov	_fsm_alarm_fn_sub_curstate_1_257,#0x01
                                   3214 ;	../fsm.c:380: break;
      000B6B 80 06            [24] 3215 	sjmp	00164$
      000B6D                       3216 00160$:
                                   3217 ;	../fsm.c:382: if(menu_state == BUTTON_LONG_PRESSED){
      000B6D BF 01 03         [24] 3218 	cjne	r7,#0x01,00164$
                                   3219 ;	../fsm.c:383: sub_curstate = fsm_alarm_substate_toggle;
      000B70 75*06 00         [24] 3220 	mov	_fsm_alarm_fn_sub_curstate_1_257,#0x00
                                   3221 ;	../fsm.c:390: }
      000B73                       3222 00164$:
                                   3223 ;	../fsm.c:392: return fsm_repeat;
      000B73 75 82 01         [24] 3224 	mov	dpl,#0x01
      000B76 22               [24] 3225 	ret
                                   3226 ;------------------------------------------------------------
                                   3227 ;Allocation info for local variables in function 'fsm_config_fn'
                                   3228 ;------------------------------------------------------------
                                   3229 ;config_tmp2               Allocated to registers r4 r5 
                                   3230 ;menu_state                Allocated to registers r7 
                                   3231 ;select_state              Allocated to registers r6 
                                   3232 ;__00020071                Allocated to registers 
                                   3233 ;__00040067                Allocated to registers 
                                   3234 ;tmp                       Allocated to registers r4 r5 
                                   3235 ;__00040069                Allocated to registers 
                                   3236 ;tmp                       Allocated to registers r4 r5 
                                   3237 ;tmp                       Allocated to registers r4 r5 
                                   3238 ;curstate                  Allocated with name '_fsm_config_fn_curstate_1_303'
                                   3239 ;config_tmp                Allocated with name '_fsm_config_fn_config_tmp_1_303'
                                   3240 ;------------------------------------------------------------
                                   3241 ;	../fsm.c:396: enum fsm_return fsm_config_fn() __reentrant {
                                   3242 ;	-----------------------------------------
                                   3243 ;	 function fsm_config_fn
                                   3244 ;	-----------------------------------------
      000B77                       3245 _fsm_config_fn:
                                   3246 ;	../fsm.c:403: menu_state = button_read_and_clear_menu();
      000B77 12r00r00         [24] 3247 	lcall	_button_read_and_clear_menu
      000B7A AF 82            [24] 3248 	mov	r7,dpl
                                   3249 ;	../fsm.c:404: select_state = button_read_and_clear_select();
      000B7C C0 07            [24] 3250 	push	ar7
      000B7E 12r00r00         [24] 3251 	lcall	_button_read_and_clear_select
      000B81 AE 82            [24] 3252 	mov	r6,dpl
      000B83 D0 07            [24] 3253 	pop	ar7
                                   3254 ;	../fsm.c:406: switch(curstate) {
      000B85 E5*07            [12] 3255 	mov	a,_fsm_config_fn_curstate_1_303
      000B87 24 F1            [12] 3256 	add	a,#0xff - 0x0e
      000B89 50 03            [24] 3257 	jnc	00240$
      000B8B 02r0DrD7         [24] 3258 	ljmp	00164$
      000B8E                       3259 00240$:
      000B8E E5*07            [12] 3260 	mov	a,_fsm_config_fn_curstate_1_303
      000B90 24 0B            [12] 3261 	add	a,#(00241$-3-.)
      000B92 83               [24] 3262 	movc	a,@a+pc
      000B93 F5 82            [12] 3263 	mov	dpl,a
      000B95 E5*07            [12] 3264 	mov	a,_fsm_config_fn_curstate_1_303
      000B97 24 13            [12] 3265 	add	a,#(00242$-3-.)
      000B99 83               [24] 3266 	movc	a,@a+pc
      000B9A F5 83            [12] 3267 	mov	dph,a
      000B9C E4               [12] 3268 	clr	a
      000B9D 73               [24] 3269 	jmp	@a+dptr
      000B9E                       3270 00241$:
      000B9ErBC                    3271 	.db	00101$
      000B9FrE0                    3272 	.db	00106$
      000BA0rF5                    3273 	.db	00112$
      000BA1rF5                    3274 	.db	00112$
      000BA2r5A                    3275 	.db	00123$
      000BA3r83                    3276 	.db	00128$
      000BA4r0A                    3277 	.db	00138$
      000BA5r1E                    3278 	.db	00150$
      000BA6r1E                    3279 	.db	00150$
      000BA7r1E                    3280 	.db	00150$
      000BA8r1E                    3281 	.db	00150$
      000BA9r1E                    3282 	.db	00150$
      000BAAr1E                    3283 	.db	00150$
      000BABr1E                    3284 	.db	00150$
      000BACr1E                    3285 	.db	00150$
      000BAD                       3286 00242$:
      000BADs0B                    3287 	.db	00101$>>8
      000BAEs0B                    3288 	.db	00106$>>8
      000BAFs0B                    3289 	.db	00112$>>8
      000BB0s0B                    3290 	.db	00112$>>8
      000BB1s0C                    3291 	.db	00123$>>8
      000BB2s0C                    3292 	.db	00128$>>8
      000BB3s0D                    3293 	.db	00138$>>8
      000BB4s0D                    3294 	.db	00150$>>8
      000BB5s0D                    3295 	.db	00150$>>8
      000BB6s0D                    3296 	.db	00150$>>8
      000BB7s0D                    3297 	.db	00150$>>8
      000BB8s0D                    3298 	.db	00150$>>8
      000BB9s0D                    3299 	.db	00150$>>8
      000BBAs0D                    3300 	.db	00150$>>8
      000BBBs0D                    3301 	.db	00150$>>8
                                   3302 ;	../fsm.c:407: case fsm_config_label:
      000BBC                       3303 00101$:
                                   3304 ;	../fsm.c:408: if(menu_state == BUTTON_PRESSED){
      000BBC EF               [12] 3305 	mov	a,r7
      000BBD 70 13            [24] 3306 	jnz	00103$
                                   3307 ;	../fsm.c:414: ds1302_calculate_CRC();
      000BBF 12r00r00         [24] 3308 	lcall	_ds1302_calculate_CRC
                                   3309 ;	../fsm.c:415: ds1302_write_SRAM();
      000BC2 12r00r00         [24] 3310 	lcall	_ds1302_write_SRAM
                                   3311 ;	../fsm.c:416: transition_ticks = centiseconds();
      000BC5 12r00r00         [24] 3312 	lcall	_centiseconds
      000BC8 85 82*01         [24] 3313 	mov	_transition_ticks,dpl
      000BCB 85 83*02         [24] 3314 	mov	(_transition_ticks + 1),dph
                                   3315 ;	../fsm.c:417: return fsm_fail;
      000BCE 75 82 02         [24] 3316 	mov	dpl,#0x02
      000BD1 22               [24] 3317 	ret
      000BD2                       3318 00103$:
                                   3319 ;	../fsm.c:419: if(select_state == BUTTON_PRESSED)
      000BD2 EE               [12] 3320 	mov	a,r6
      000BD3 70 02            [24] 3321 	jnz	00105$
                                   3322 ;	../fsm.c:420: curstate++;
      000BD5 05*07            [12] 3323 	inc	_fsm_config_fn_curstate_1_303
      000BD7                       3324 00105$:
                                   3325 ;	../fsm.c:421: display_puts(ledstrings[ledstrings_conf]);
      000BD7 90r00r37         [24] 3326 	mov	dptr,#(_ledstrings + 0x0037)
      000BDA 12r00r00         [24] 3327 	lcall	_display_puts
                                   3328 ;	../fsm.c:422: break;
      000BDD 02r0DrD7         [24] 3329 	ljmp	00164$
                                   3330 ;	../fsm.c:423: case fsm_config_ldr_calib_label:
      000BE0                       3331 00106$:
                                   3332 ;	../fsm.c:424: if(menu_state == BUTTON_PRESSED)
      000BE0 EF               [12] 3333 	mov	a,r7
      000BE1 70 03            [24] 3334 	jnz	00108$
                                   3335 ;	../fsm.c:425: curstate = fsm_config_thermistor_calib_label;
      000BE3 75*07 04         [24] 3336 	mov	_fsm_config_fn_curstate_1_303,#0x04
      000BE6                       3337 00108$:
                                   3338 ;	../fsm.c:426: if(select_state == BUTTON_PRESSED)
      000BE6 EE               [12] 3339 	mov	a,r6
      000BE7 70 03            [24] 3340 	jnz	00110$
                                   3341 ;	../fsm.c:427: curstate = fsm_config_ldr_calib_low;
      000BE9 75*07 02         [24] 3342 	mov	_fsm_config_fn_curstate_1_303,#0x02
      000BEC                       3343 00110$:
                                   3344 ;	../fsm.c:428: display_puts(ledstrings[ledstrings_lcal]);
      000BEC 90r00r3C         [24] 3345 	mov	dptr,#(_ledstrings + 0x003c)
      000BEF 12r00r00         [24] 3346 	lcall	_display_puts
                                   3347 ;	../fsm.c:429: break;
      000BF2 02r0DrD7         [24] 3348 	ljmp	00164$
                                   3349 ;	../fsm.c:431: case fsm_config_ldr_calib_high:
      000BF5                       3350 00112$:
                                   3351 ;	../fsm.c:432: display_autobrightness = 0;
                                   3352 ;	assignBit
      000BF5 C2 1F            [12] 3353 	clr	_display_autobrightness
                                   3354 ;	../fsm.c:434: if(menu_state == BUTTON_LONG_PRESSED)
      000BF7 BF 01 03         [24] 3355 	cjne	r7,#0x01,00114$
                                   3356 ;	../fsm.c:435: curstate = fsm_config_ldr_calib_label;
      000BFA 75*07 01         [24] 3357 	mov	_fsm_config_fn_curstate_1_303,#0x01
      000BFD                       3358 00114$:
                                   3359 ;	../fsm.c:436: if(select_state == BUTTON_PRESSED){
      000BFD EE               [12] 3360 	mov	a,r6
      000BFE 70 2F            [24] 3361 	jnz	00119$
                                   3362 ;	../fsm.c:437: if(curstate == fsm_config_ldr_calib_low) {
      000C00 74 02            [12] 3363 	mov	a,#0x02
      000C02 B5*07 10         [24] 3364 	cjne	a,_fsm_config_fn_curstate_1_303,00116$
                                   3365 ;	/home/shenghao/workspace/TESTMCS51/adc.h:133: INT_IE_EADC = 0;				//Disable ADC interrupt
                                   3366 ;	assignBit
      000C05 C2 AD            [12] 3367 	clr	_INT_IE_EADC
                                   3368 ;	/home/shenghao/workspace/TESTMCS51/adc.h:134: tmp = adc_ldr_reading;	   		//Store temporary result
      000C07 AC*00            [24] 3369 	mov	r4,_adc_ldr_reading
      000C09 AD*01            [24] 3370 	mov	r5,(_adc_ldr_reading + 1)
                                   3371 ;	/home/shenghao/workspace/TESTMCS51/adc.h:135: INT_IE_EADC = 1;				//Enable ADC interrupt
                                   3372 ;	assignBit
      000C0B D2 AD            [12] 3373 	setb	_INT_IE_EADC
                                   3374 ;	../fsm.c:438: config_tmp = adc_get_ldr();
      000C0D 8C*08            [24] 3375 	mov	_fsm_config_fn_config_tmp_1_303,r4
      000C0F 8D*09            [24] 3376 	mov	(_fsm_config_fn_config_tmp_1_303 + 1),r5
                                   3377 ;	../fsm.c:439: curstate++;
      000C11 05*07            [12] 3378 	inc	_fsm_config_fn_curstate_1_303
      000C13 80 1A            [24] 3379 	sjmp	00119$
      000C15                       3380 00116$:
                                   3381 ;	/home/shenghao/workspace/TESTMCS51/adc.h:133: INT_IE_EADC = 0;				//Disable ADC interrupt
                                   3382 ;	assignBit
      000C15 C2 AD            [12] 3383 	clr	_INT_IE_EADC
                                   3384 ;	/home/shenghao/workspace/TESTMCS51/adc.h:134: tmp = adc_ldr_reading;	   		//Store temporary result
      000C17 AC*00            [24] 3385 	mov	r4,_adc_ldr_reading
      000C19 AD*01            [24] 3386 	mov	r5,(_adc_ldr_reading + 1)
                                   3387 ;	/home/shenghao/workspace/TESTMCS51/adc.h:135: INT_IE_EADC = 1;				//Enable ADC interrupt
                                   3388 ;	assignBit
      000C1B D2 AD            [12] 3389 	setb	_INT_IE_EADC
                                   3390 ;	../fsm.c:441: adc_calibrate_LDR(adc_get_ldr(),config_tmp);
      000C1D 85*08*00         [24] 3391 	mov	_adc_calibrate_LDR_PARM_2,_fsm_config_fn_config_tmp_1_303
      000C20 85*09*01         [24] 3392 	mov	(_adc_calibrate_LDR_PARM_2 + 1),(_fsm_config_fn_config_tmp_1_303 + 1)
      000C23 8C 82            [24] 3393 	mov	dpl,r4
      000C25 8D 83            [24] 3394 	mov	dph,r5
      000C27 12r00r00         [24] 3395 	lcall	_adc_calibrate_LDR
                                   3396 ;	../fsm.c:442: curstate = fsm_config_ldr_calib_label;
      000C2A 75*07 01         [24] 3397 	mov	_fsm_config_fn_curstate_1_303,#0x01
                                   3398 ;	../fsm.c:443: display_autobrightness = 1;
                                   3399 ;	assignBit
      000C2D D2 1F            [12] 3400 	setb	_display_autobrightness
      000C2F                       3401 00119$:
                                   3402 ;	../fsm.c:446: if(curstate == fsm_config_ldr_calib_low) {
      000C2F 74 02            [12] 3403 	mov	a,#0x02
      000C31 B5*07 13         [24] 3404 	cjne	a,_fsm_config_fn_curstate_1_303,00121$
                                   3405 ;	../fsm.c:447: display_puts(ledstrings[ledstrings_cllo]);
      000C34 90r00r46         [24] 3406 	mov	dptr,#(_ledstrings + 0x0046)
      000C37 12r00r00         [24] 3407 	lcall	_display_puts
                                   3408 ;	../fsm.c:448: INT_IE_EA = 0;
                                   3409 ;	assignBit
      000C3A C2 AF            [12] 3410 	clr	_INT_IE_EA
                                   3411 ;	../fsm.c:449: display_counts = DISPLAY_COUNTS_MIN;
      000C3C 75*00 2C         [24] 3412 	mov	_display_counts,#0x2c
      000C3F 75*01 01         [24] 3413 	mov	(_display_counts + 1),#0x01
                                   3414 ;	../fsm.c:450: INT_IE_EA = 1;
                                   3415 ;	assignBit
      000C42 D2 AF            [12] 3416 	setb	_INT_IE_EA
      000C44 02r0DrD7         [24] 3417 	ljmp	00164$
      000C47                       3418 00121$:
                                   3419 ;	../fsm.c:452: display_puts(ledstrings[ledstrings_clhi]);
      000C47 90r00r4B         [24] 3420 	mov	dptr,#(_ledstrings + 0x004b)
      000C4A 12r00r00         [24] 3421 	lcall	_display_puts
                                   3422 ;	../fsm.c:453: INT_IE_EA = 0;
                                   3423 ;	assignBit
      000C4D C2 AF            [12] 3424 	clr	_INT_IE_EA
                                   3425 ;	../fsm.c:454: display_counts = DISPLAY_COUNTS_MAX;
      000C4F 75*00 00         [24] 3426 	mov	_display_counts,#0x00
      000C52 75*01 EA         [24] 3427 	mov	(_display_counts + 1),#0xea
                                   3428 ;	../fsm.c:455: INT_IE_EA = 1;
                                   3429 ;	assignBit
      000C55 D2 AF            [12] 3430 	setb	_INT_IE_EA
                                   3431 ;	../fsm.c:457: break;
      000C57 02r0DrD7         [24] 3432 	ljmp	00164$
                                   3433 ;	../fsm.c:458: case fsm_config_thermistor_calib_label:
      000C5A                       3434 00123$:
                                   3435 ;	../fsm.c:459: if(menu_state == BUTTON_PRESSED)
      000C5A EF               [12] 3436 	mov	a,r7
      000C5B 70 03            [24] 3437 	jnz	00125$
                                   3438 ;	../fsm.c:460: curstate = fsm_config_display_label;
      000C5D 75*07 06         [24] 3439 	mov	_fsm_config_fn_curstate_1_303,#0x06
      000C60                       3440 00125$:
                                   3441 ;	../fsm.c:461: if(select_state == BUTTON_PRESSED) {
      000C60 EE               [12] 3442 	mov	a,r6
      000C61 70 17            [24] 3443 	jnz	00127$
                                   3444 ;	../fsm.c:462: curstate = fsm_config_thermistor_calib;
      000C63 75*07 05         [24] 3445 	mov	_fsm_config_fn_curstate_1_303,#0x05
                                   3446 ;	../fsm.c:463: config_tmp = (TEMP_OFFSET_LSB | (TEMP_OFFSET_MSB << 0x08));
      000C66 90r00r1D         [24] 3447 	mov	dptr,#(_ds1302_sram_data + 0x001d)
      000C69 E0               [24] 3448 	movx	a,@dptr
      000C6A FD               [12] 3449 	mov	r5,a
      000C6B 90r00r1E         [24] 3450 	mov	dptr,#(_ds1302_sram_data + 0x001e)
      000C6E E0               [24] 3451 	movx	a,@dptr
      000C6F FB               [12] 3452 	mov	r3,a
      000C70 E4               [12] 3453 	clr	a
      000C71 FC               [12] 3454 	mov	r4,a
      000C72 FA               [12] 3455 	mov	r2,a
      000C73 4D               [12] 3456 	orl	a,r5
      000C74 F5*08            [12] 3457 	mov	_fsm_config_fn_config_tmp_1_303,a
      000C76 EB               [12] 3458 	mov	a,r3
      000C77 4A               [12] 3459 	orl	a,r2
      000C78 F5*09            [12] 3460 	mov	(_fsm_config_fn_config_tmp_1_303 + 1),a
      000C7A                       3461 00127$:
                                   3462 ;	../fsm.c:465: display_puts(ledstrings[ledstrings_tcal]);
      000C7A 90r00r50         [24] 3463 	mov	dptr,#(_ledstrings + 0x0050)
      000C7D 12r00r00         [24] 3464 	lcall	_display_puts
                                   3465 ;	../fsm.c:466: break;
      000C80 02r0DrD7         [24] 3466 	ljmp	00164$
                                   3467 ;	../fsm.c:467: case fsm_config_thermistor_calib:
      000C83                       3468 00128$:
                                   3469 ;	../fsm.c:468: if(menu_state == BUTTON_LONG_PRESSED) {
      000C83 BF 01 11         [24] 3470 	cjne	r7,#0x01,00130$
                                   3471 ;	../fsm.c:469: curstate = fsm_config_thermistor_calib_label;
      000C86 75*07 04         [24] 3472 	mov	_fsm_config_fn_curstate_1_303,#0x04
                                   3473 ;	../fsm.c:470: TEMP_OFFSET_LSB = (config_tmp & 0x00ff);
      000C89 AD*08            [24] 3474 	mov	r5,_fsm_config_fn_config_tmp_1_303
      000C8B 90r00r1D         [24] 3475 	mov	dptr,#(_ds1302_sram_data + 0x001d)
      000C8E ED               [12] 3476 	mov	a,r5
      000C8F F0               [24] 3477 	movx	@dptr,a
                                   3478 ;	../fsm.c:471: TEMP_OFFSET_MSB = (config_tmp >> 0x08);
      000C90 AD*09            [24] 3479 	mov	r5,(_fsm_config_fn_config_tmp_1_303 + 1)
      000C92 90r00r1E         [24] 3480 	mov	dptr,#(_ds1302_sram_data + 0x001e)
      000C95 ED               [12] 3481 	mov	a,r5
      000C96 F0               [24] 3482 	movx	@dptr,a
      000C97                       3483 00130$:
                                   3484 ;	../fsm.c:473: if((select_state == BUTTON_PRESSED) || (select_state == BUTTON_HELD_DOWN))
      000C97 EE               [12] 3485 	mov	a,r6
      000C98 60 03            [24] 3486 	jz	00131$
      000C9A BE 02 15         [24] 3487 	cjne	r6,#0x02,00132$
      000C9D                       3488 00131$:
                                   3489 ;	../fsm.c:474: config_tmp = bcd_add_16(config_tmp,0x0001);
      000C9D 75*00 01         [24] 3490 	mov	_bcd_add_16_PARM_2,#0x01
      000CA0 75*01 00         [24] 3491 	mov	(_bcd_add_16_PARM_2 + 1),#0x00
      000CA3 85*08 82         [24] 3492 	mov	dpl,_fsm_config_fn_config_tmp_1_303
      000CA6 85*09 83         [24] 3493 	mov	dph,(_fsm_config_fn_config_tmp_1_303 + 1)
      000CA9 12r00r00         [24] 3494 	lcall	_bcd_add_16
      000CAC 85 82*08         [24] 3495 	mov	_fsm_config_fn_config_tmp_1_303,dpl
      000CAF 85 83*09         [24] 3496 	mov	(_fsm_config_fn_config_tmp_1_303 + 1),dph
      000CB2                       3497 00132$:
                                   3498 ;	../fsm.c:476: if(config_tmp > 0x0140)
      000CB2 C3               [12] 3499 	clr	c
      000CB3 74 40            [12] 3500 	mov	a,#0x40
      000CB5 95*08            [12] 3501 	subb	a,_fsm_config_fn_config_tmp_1_303
      000CB7 74 01            [12] 3502 	mov	a,#0x01
      000CB9 95*09            [12] 3503 	subb	a,(_fsm_config_fn_config_tmp_1_303 + 1)
      000CBB 50 05            [24] 3504 	jnc	00135$
                                   3505 ;	../fsm.c:477: config_tmp = 0x0000;
      000CBD E4               [12] 3506 	clr	a
      000CBE F5*08            [12] 3507 	mov	_fsm_config_fn_config_tmp_1_303,a
      000CC0 F5*09            [12] 3508 	mov	(_fsm_config_fn_config_tmp_1_303 + 1),a
      000CC2                       3509 00135$:
                                   3510 ;	../fsm.c:479: config_tmp2 = EEPROM_TEMP_FROM_THERMISTOR_TABLE[adc_get_thermistor()];
                                   3511 ;	/home/shenghao/workspace/TESTMCS51/adc.h:147: INT_IE_EADC = 0;				//Disable ADC interrupt
                                   3512 ;	assignBit
      000CC2 C2 AD            [12] 3513 	clr	_INT_IE_EADC
                                   3514 ;	/home/shenghao/workspace/TESTMCS51/adc.h:148: tmp = adc_thermistor_reading;	//Store temporary result
      000CC4 AC*00            [24] 3515 	mov	r4,_adc_thermistor_reading
      000CC6 AD*01            [24] 3516 	mov	r5,(_adc_thermistor_reading + 1)
                                   3517 ;	/home/shenghao/workspace/TESTMCS51/adc.h:149: INT_IE_EADC = 1;				//Enable ADC interrupt
                                   3518 ;	assignBit
      000CC8 D2 AD            [12] 3519 	setb	_INT_IE_EADC
                                   3520 ;	../fsm.c:479: config_tmp2 = EEPROM_TEMP_FROM_THERMISTOR_TABLE[adc_get_thermistor()];
      000CCA EC               [12] 3521 	mov	a,r4
      000CCB 2C               [12] 3522 	add	a,r4
      000CCC FC               [12] 3523 	mov	r4,a
      000CCD ED               [12] 3524 	mov	a,r5
      000CCE 33               [12] 3525 	rlc	a
      000CCF FD               [12] 3526 	mov	r5,a
      000CD0 8C 82            [24] 3527 	mov	dpl,r4
      000CD2 74s00            [12] 3528 	mov	a,#(_EEPROM_TEMP_FROM_THERMISTOR_TABLE >> 8)
      000CD4 2D               [12] 3529 	add	a,r5
      000CD5 F5 83            [12] 3530 	mov	dph,a
      000CD7 E4               [12] 3531 	clr	a
      000CD8 93               [24] 3532 	movc	a,@a+dptr
      000CD9 FC               [12] 3533 	mov	r4,a
      000CDA A3               [24] 3534 	inc	dptr
      000CDB E4               [12] 3535 	clr	a
      000CDC 93               [24] 3536 	movc	a,@a+dptr
      000CDD FD               [12] 3537 	mov	r5,a
                                   3538 ;	../fsm.c:480: config_tmp2 = bcd_add_16(config_tmp2,config_tmp);
      000CDE 85*08*00         [24] 3539 	mov	_bcd_add_16_PARM_2,_fsm_config_fn_config_tmp_1_303
      000CE1 85*09*01         [24] 3540 	mov	(_bcd_add_16_PARM_2 + 1),(_fsm_config_fn_config_tmp_1_303 + 1)
      000CE4 8C 82            [24] 3541 	mov	dpl,r4
      000CE6 8D 83            [24] 3542 	mov	dph,r5
      000CE8 12r00r00         [24] 3543 	lcall	_bcd_add_16
      000CEB AA 82            [24] 3544 	mov	r2,dpl
      000CED AB 83            [24] 3545 	mov	r3,dph
      000CEF 8A 04            [24] 3546 	mov	ar4,r2
      000CF1 8B 05            [24] 3547 	mov	ar5,r3
                                   3548 ;	../fsm.c:481: if(config_tmp2 > 0x0999)
      000CF3 C3               [12] 3549 	clr	c
      000CF4 74 99            [12] 3550 	mov	a,#0x99
      000CF6 9C               [12] 3551 	subb	a,r4
      000CF7 74 09            [12] 3552 	mov	a,#0x09
      000CF9 9D               [12] 3553 	subb	a,r5
      000CFA 50 04            [24] 3554 	jnc	00137$
                                   3555 ;	../fsm.c:482: config_tmp2 = 0x0999;
      000CFC 7C 99            [12] 3556 	mov	r4,#0x99
      000CFE 7D 09            [12] 3557 	mov	r5,#0x09
      000D00                       3558 00137$:
                                   3559 ;	../fsm.c:483: display_puttemp(config_tmp2);
      000D00 8C 82            [24] 3560 	mov	dpl,r4
      000D02 8D 83            [24] 3561 	mov	dph,r5
      000D04 12r00r00         [24] 3562 	lcall	_display_puttemp
                                   3563 ;	../fsm.c:484: break;
      000D07 02r0DrD7         [24] 3564 	ljmp	00164$
                                   3565 ;	../fsm.c:485: case fsm_config_display_label:
      000D0A                       3566 00138$:
                                   3567 ;	../fsm.c:486: if(select_state == BUTTON_PRESSED)
      000D0A EE               [12] 3568 	mov	a,r6
      000D0B 70 03            [24] 3569 	jnz	00140$
                                   3570 ;	../fsm.c:487: curstate = fsm_config_auto_mmss;
      000D0D 75*07 07         [24] 3571 	mov	_fsm_config_fn_curstate_1_303,#0x07
      000D10                       3572 00140$:
                                   3573 ;	../fsm.c:488: if(menu_state == BUTTON_PRESSED)
      000D10 EF               [12] 3574 	mov	a,r7
                                   3575 ;	../fsm.c:489: curstate = fsm_config_label;
      000D11 70 02            [24] 3576 	jnz	00142$
      000D13 F5*07            [12] 3577 	mov	_fsm_config_fn_curstate_1_303,a
      000D15                       3578 00142$:
                                   3579 ;	../fsm.c:490: display_puts(ledstrings[ledstrings_disp]);
      000D15 90r00r55         [24] 3580 	mov	dptr,#(_ledstrings + 0x0055)
      000D18 12r00r00         [24] 3581 	lcall	_display_puts
                                   3582 ;	../fsm.c:491: break;
      000D1B 02r0DrD7         [24] 3583 	ljmp	00164$
                                   3584 ;	../fsm.c:499: case fsm_config_display_remove_lzeroes:
      000D1E                       3585 00150$:
                                   3586 ;	../fsm.c:500: display_puts(ledstrings[curstate + 0x0b]);
      000D1E AC*07            [24] 3587 	mov	r4,_fsm_config_fn_curstate_1_303
      000D20 7D 00            [12] 3588 	mov	r5,#0x00
      000D22 74 0B            [12] 3589 	mov	a,#0x0b
      000D24 2C               [12] 3590 	add	a,r4
      000D25 F5*00            [12] 3591 	mov	__mulint_PARM_2,a
      000D27 E4               [12] 3592 	clr	a
      000D28 3D               [12] 3593 	addc	a,r5
      000D29 F5*01            [12] 3594 	mov	(__mulint_PARM_2 + 1),a
      000D2B 90 00 05         [24] 3595 	mov	dptr,#0x0005
      000D2E C0 07            [24] 3596 	push	ar7
      000D30 C0 06            [24] 3597 	push	ar6
      000D32 12r00r00         [24] 3598 	lcall	__mulint
      000D35 AC 82            [24] 3599 	mov	r4,dpl
      000D37 AD 83            [24] 3600 	mov	r5,dph
      000D39 EC               [12] 3601 	mov	a,r4
      000D3A 24r00            [12] 3602 	add	a,#_ledstrings
      000D3C F5 82            [12] 3603 	mov	dpl,a
      000D3E ED               [12] 3604 	mov	a,r5
      000D3F 34s00            [12] 3605 	addc	a,#(_ledstrings >> 8)
      000D41 F5 83            [12] 3606 	mov	dph,a
      000D43 12r00r00         [24] 3607 	lcall	_display_puts
      000D46 D0 06            [24] 3608 	pop	ar6
      000D48 D0 07            [24] 3609 	pop	ar7
                                   3610 ;	../fsm.c:501: if(curstate != fsm_config_display_remove_lzeroes) {
      000D4A 74 0E            [12] 3611 	mov	a,#0x0e
      000D4C B5*07 02         [24] 3612 	cjne	a,_fsm_config_fn_curstate_1_303,00265$
      000D4F 80 47            [24] 3613 	sjmp	00156$
      000D51                       3614 00265$:
                                   3615 ;	../fsm.c:502: display_putbool((SC_1 >> (curstate - 0x06)) & 0x01);
      000D51 90r00r03         [24] 3616 	mov	dptr,#(_ds1302_sram_data + 0x0003)
      000D54 E0               [24] 3617 	movx	a,@dptr
      000D55 FD               [12] 3618 	mov	r5,a
      000D56 E5*07            [12] 3619 	mov	a,_fsm_config_fn_curstate_1_303
      000D58 24 FA            [12] 3620 	add	a,#0xfa
      000D5A F5 F0            [12] 3621 	mov	b,a
      000D5C 05 F0            [12] 3622 	inc	b
      000D5E ED               [12] 3623 	mov	a,r5
      000D5F 80 02            [24] 3624 	sjmp	00267$
      000D61                       3625 00266$:
      000D61 C3               [12] 3626 	clr	c
      000D62 13               [12] 3627 	rrc	a
      000D63                       3628 00267$:
      000D63 D5 F0 FB         [24] 3629 	djnz	b,00266$
      000D66 54 01            [12] 3630 	anl	a,#0x01
      000D68 F5 82            [12] 3631 	mov	dpl,a
      000D6A C0 07            [24] 3632 	push	ar7
      000D6C C0 06            [24] 3633 	push	ar6
      000D6E 12r00r00         [24] 3634 	lcall	_display_putbool
      000D71 D0 06            [24] 3635 	pop	ar6
      000D73 D0 07            [24] 3636 	pop	ar7
                                   3637 ;	../fsm.c:503: if(select_state == BUTTON_PRESSED)
      000D75 EE               [12] 3638 	mov	a,r6
      000D76 70 40            [24] 3639 	jnz	00157$
                                   3640 ;	../fsm.c:504: SC_1 ^= (0x01 << (curstate - 0x06));
      000D78 90r00r03         [24] 3641 	mov	dptr,#(_ds1302_sram_data + 0x0003)
      000D7B E0               [24] 3642 	movx	a,@dptr
      000D7C FD               [12] 3643 	mov	r5,a
      000D7D E5*07            [12] 3644 	mov	a,_fsm_config_fn_curstate_1_303
      000D7F 24 FA            [12] 3645 	add	a,#0xfa
      000D81 F5 F0            [12] 3646 	mov	b,a
      000D83 05 F0            [12] 3647 	inc	b
      000D85 74 01            [12] 3648 	mov	a,#0x01
      000D87 80 02            [24] 3649 	sjmp	00271$
      000D89                       3650 00269$:
      000D89 25 E0            [12] 3651 	add	a,acc
      000D8B                       3652 00271$:
      000D8B D5 F0 FB         [24] 3653 	djnz	b,00269$
      000D8E FC               [12] 3654 	mov	r4,a
      000D8F 62 05            [12] 3655 	xrl	ar5,a
      000D91 90r00r03         [24] 3656 	mov	dptr,#(_ds1302_sram_data + 0x0003)
      000D94 ED               [12] 3657 	mov	a,r5
      000D95 F0               [24] 3658 	movx	@dptr,a
      000D96 80 20            [24] 3659 	sjmp	00157$
      000D98                       3660 00156$:
                                   3661 ;	../fsm.c:506: display_putbool(DISPLAY_REMOVE_LEADING_ZEROES);
      000D98 90r00r02         [24] 3662 	mov	dptr,#(_ds1302_sram_data + 0x0002)
      000D9B E0               [24] 3663 	movx	a,@dptr
      000D9C FD               [12] 3664 	mov	r5,a
      000D9D 74 01            [12] 3665 	mov	a,#0x01
      000D9F 5D               [12] 3666 	anl	a,r5
      000DA0 F5 82            [12] 3667 	mov	dpl,a
      000DA2 C0 07            [24] 3668 	push	ar7
      000DA4 C0 06            [24] 3669 	push	ar6
      000DA6 12r00r00         [24] 3670 	lcall	_display_putbool
      000DA9 D0 06            [24] 3671 	pop	ar6
      000DAB D0 07            [24] 3672 	pop	ar7
                                   3673 ;	../fsm.c:507: if(select_state == BUTTON_PRESSED)
      000DAD EE               [12] 3674 	mov	a,r6
      000DAE 70 08            [24] 3675 	jnz	00157$
                                   3676 ;	../fsm.c:508: SC_0 ^= 0x01;
      000DB0 90r00r02         [24] 3677 	mov	dptr,#(_ds1302_sram_data + 0x0002)
      000DB3 E0               [24] 3678 	movx	a,@dptr
      000DB4 64 01            [12] 3679 	xrl	a,#0x01
      000DB6 FE               [12] 3680 	mov	r6,a
      000DB7 F0               [24] 3681 	movx	@dptr,a
      000DB8                       3682 00157$:
                                   3683 ;	/home/shenghao/workspace/TESTMCS51/display.h:116: display_buffer[1] &= 0x7f;
      000DB8 74 7F            [12] 3684 	mov	a,#0x7f
      000DBA 55*01            [12] 3685 	anl	a,(_display_buffer + 0x0001)
      000DBC F5*01            [12] 3686 	mov	(_display_buffer + 0x0001),a
                                   3687 ;	/home/shenghao/workspace/TESTMCS51/display.h:117: display_buffer[2] &= 0x7f;
      000DBE 74 7F            [12] 3688 	mov	a,#0x7f
      000DC0 55*02            [12] 3689 	anl	a,(_display_buffer + 0x0002)
      000DC2 F5*02            [12] 3690 	mov	(_display_buffer + 0x0002),a
                                   3691 ;	../fsm.c:512: if(menu_state == BUTTON_PRESSED)
      000DC4 EF               [12] 3692 	mov	a,r7
      000DC5 70 0A            [24] 3693 	jnz	00161$
                                   3694 ;	../fsm.c:513: if(++curstate == fsm_config_end)
      000DC7 05*07            [12] 3695 	inc	_fsm_config_fn_curstate_1_303
      000DC9 74 0F            [12] 3696 	mov	a,#0x0f
      000DCB B5*07 03         [24] 3697 	cjne	a,_fsm_config_fn_curstate_1_303,00161$
                                   3698 ;	../fsm.c:514: curstate = fsm_config_auto_mmss;
      000DCE 75*07 07         [24] 3699 	mov	_fsm_config_fn_curstate_1_303,#0x07
      000DD1                       3700 00161$:
                                   3701 ;	../fsm.c:515: if(menu_state == BUTTON_LONG_PRESSED)
      000DD1 BF 01 03         [24] 3702 	cjne	r7,#0x01,00164$
                                   3703 ;	../fsm.c:516: curstate = fsm_config_display_label;
      000DD4 75*07 06         [24] 3704 	mov	_fsm_config_fn_curstate_1_303,#0x06
                                   3705 ;	../fsm.c:518: }
      000DD7                       3706 00164$:
                                   3707 ;	../fsm.c:520: return fsm_repeat;
      000DD7 75 82 01         [24] 3708 	mov	dpl,#0x01
      000DDA 22               [24] 3709 	ret
                                   3710 	.area CSEG    (CODE)
                                   3711 	.area CONST   (CODE)
                                   3712 	.area XINIT   (CODE)
                                   3713 	.area CABS    (ABS,CODE)
      003300                       3714 	.org 0x3300
      003300                       3715 _fsm_transition_table_fp:
      003300r89s06                 3716 	.byte _fsm_set_fn, (_fsm_set_fn >> 8)
      003302r00s00                 3717 	.byte _fsm_home_fn, (_fsm_home_fn >> 8)
      003304r00s00                 3718 	.byte _fsm_home_fn, (_fsm_home_fn >> 8)
      003306r00s00                 3719 	.byte _fsm_home_fn, (_fsm_home_fn >> 8)
      003308r89s06                 3720 	.byte _fsm_set_fn, (_fsm_set_fn >> 8)
      00330Ar17s08                 3721 	.byte _fsm_alarm_fn, (_fsm_alarm_fn >> 8)
      00330Cr00s00                 3722 	.byte _fsm_home_fn, (_fsm_home_fn >> 8)
      00330Er17s08                 3723 	.byte _fsm_alarm_fn, (_fsm_alarm_fn >> 8)
      003310r77s0B                 3724 	.byte _fsm_config_fn, (_fsm_config_fn >> 8)
      003312r00s00                 3725 	.byte _fsm_home_fn, (_fsm_home_fn >> 8)
      003314r77s0B                 3726 	.byte _fsm_config_fn, (_fsm_config_fn >> 8)
      003316r00s00                 3727 	.byte _fsm_home_fn, (_fsm_home_fn >> 8)
      003318                       3728 	.org 0x3318
      003318                       3729 _fsm_transition_table_s:
      003318 01                    3730 	.db #0x01	; 1
      003319 00                    3731 	.db #0x00	; 0
      00331A 00                    3732 	.db #0x00	; 0
      00331B 00                    3733 	.db #0x00	; 0
      00331C 01                    3734 	.db #0x01	; 1
      00331D 02                    3735 	.db #0x02	; 2
      00331E 00                    3736 	.db #0x00	; 0
      00331F 02                    3737 	.db #0x02	; 2
      003320 03                    3738 	.db #0x03	; 3
      003321 00                    3739 	.db #0x00	; 0
      003322 03                    3740 	.db #0x03	; 3
      003323 00                    3741 	.db #0x00	; 0
